diff --git a/README.md b/README.md
index f047db0..8921bf0 100644
--- a/README.md
+++ b/README.md
@@ -10,26 +10,26 @@ The client library supports both the Actions SDK webhook and API.ai fulfillment.
  1. Import the appropriate class:
 
 ```javascript
-let ActionsSdkAssistant = require('actions-on-google').ActionsSdkAssistant;
+let ActionsSdkAction = require('actions-on-google').ActionsSdkAction;
 ```
 
  2. Create an instance:
 
 ```javascript
-const assistant = new ActionsSdkAssistant({request: request, response: response});
+const action = new ActionsSdkAction({request: request, response: response});
 ```
 
 ### API.ai
  1. Import the appropriate class:
 
 ```javascript
-let ApiAiAssistant = require('actions-on-google').ApiAiAssistant;
+let ApiAiAction = require('actions-on-google').ApiAiAction;
 ```
 
  2. Create an instance:
 
 ```javascript
-const assistant = new ApiAiAssistant({request: request, response: response});
+const action = new ApiAiAction({request: request, response: response});
 ```
 
 ## References and How to report bugs
diff --git a/assistant.js b/action.js
similarity index 65%
rename from assistant.js
rename to action.js
index e95a316..0cec468 100644
--- a/assistant.js
+++ b/action.js
@@ -15,10 +15,10 @@
  */
 
 /**
- * The Actions on Google client library Assistant base class.
+ * The Actions on Google client library Action base class.
  *
  * This class contains the methods that are shared between platforms to suppor the converstaion API
- * protocol form Assistant. It also exports the 'State' class as a helper to represent states by
+ * protocol form Action. It also exports the 'State' class as a helper to represent states by
  * name.
  */
 
@@ -42,18 +42,18 @@ debug.log = console.log.bind(console);
 error.log = console.error.bind(console);
 
 /**
- * Constructor for Assistant object.
+ * Constructor for Action object.
  * Should not be instantiated; rather instantiate one of the subclasses
- * {@link ActionsSdkAssistant} or {@link ApiAiAssistant}.
+ * {@link ActionsSdkAction} or {@link ApiAiAction}.
  *
  * @param {Object} options JSON configuration.
  * @param {Object} options.request Express HTTP request object.
  * @param {Object} options.response Express HTTP response object.
  * @param {Function=} options.sessionStarted Function callback when session starts.
  */
-const Assistant = class {
+const Action = class {
   constructor (options) {
-    debug('Assistant constructor');
+    debug('Action constructor');
 
     /**
      * Intent handling data structure.
@@ -112,23 +112,25 @@ const Assistant = class {
     this.responded_ = false;
 
     /**
-     * List of standard intents that the Assistant provides.
+     * List of standard intents that the Action provides.
      * @readonly
      * @enum {string}
      * @actionssdk
      * @apiai
      */
     this.StandardIntents = {
-      /** Assistant fires MAIN intent for queries like [talk to $action]. */
+      /** Action fires MAIN intent for queries like [talk to $action]. */
       MAIN: 'assistant.intent.action.MAIN',
-      /** Assistant fires TEXT intent when action issues ask intent. */
+      /** Action fires TEXT intent when action issues ask intent. */
       TEXT: 'assistant.intent.action.TEXT',
-      /** Assistant fires PERMISSION intent when action invokes askForPermission. */
-      PERMISSION: 'assistant.intent.action.PERMISSION'
+      /** Action fires PERMISSION intent when action invokes askForPermission. */
+      PERMISSION: 'assistant.intent.action.PERMISSION',
+      /** Action fires OPTION intent when action elicits selection from user. */
+      OPTION: 'assistant.intent.action.OPTION'
     };
 
     /**
-     * List of supported permissions the Assistant supports.
+     * List of supported permissions the Action supports.
      * @readonly
      * @enum {string}
      * @actionssdk
@@ -187,6 +189,50 @@ const Assistant = class {
       ACTIVE: 2
     };
 
+    /**
+     * List of supported surface capabilities the Action supports.
+     * @readonly
+     * @enum {string}
+     * @actionssdk
+     * @apiai
+     */
+    this.SurfaceCapabilities = {
+      /**
+       * The ability to output audio.
+       */
+      AUDIO_OUTPUT: 'actions.capability.AUDIO_OUTPUT',
+      /**
+       * The ability to output on a screen
+       */
+      SCREEN_OUTPUT: 'actions.capability.SCREEN_OUTPUT'
+    };
+
+    /**
+     * List of possible user input types.
+     * @readonly
+     * @enum {number}
+     * @actionssdk
+     * @apiai
+     */
+    this.InputTypes = {
+      /**
+       * Unspecified.
+       */
+      UNSPECIFIED: 0,
+      /**
+       * Input given by touch.
+       */
+      TOUCH: 1,
+      /**
+       * Input given by voice (spoken).
+       */
+      VOICE: 2,
+      /**
+       * Input given by keyboard (typed).
+       */
+      KEYBOARD: 3
+    };
+
     if (!options) {
       // ignore for JavaScript inheritance to work
       return;
@@ -253,50 +299,50 @@ const Assistant = class {
    *
    * @example
    * // Actions SDK
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
+   * const action = new ActionsSdkAction({request: request, response: response});
    *
-   * function mainIntent (assistant) {
-   *   const inputPrompt = assistant.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
+   * function mainIntent (action) {
+   *   const inputPrompt = action.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
    *         'I can read out an ordinal like ' +
    *         '<say-as interpret-as="ordinal">123</say-as>. Say a number.</speak>',
    *         ['I didn\'t hear a number', 'If you\'re still there, what\'s the number?', 'What is the number?']);
-   *   assistant.ask(inputPrompt);
+   *   action.ask(inputPrompt);
    * }
    *
-   * function rawInput (assistant) {
-   *   if (assistant.getRawInput() === 'bye') {
-   *     assistant.tell('Goodbye!');
+   * function rawInput (action) {
+   *   if (action.getRawInput() === 'bye') {
+   *     action.tell('Goodbye!');
    *   } else {
-   *     const inputPrompt = assistant.buildInputPrompt(true, '<speak>You said, <say-as interpret-as="ordinal">' +
-   *       assistant.getRawInput() + '</say-as></speak>',
+   *     const inputPrompt = action.buildInputPrompt(true, '<speak>You said, <say-as interpret-as="ordinal">' +
+   *       action.getRawInput() + '</say-as></speak>',
    *         ['I didn\'t hear a number', 'If you\'re still there, what\'s the number?', 'What is the number?']);
-   *     assistant.ask(inputPrompt);
+   *     action.ask(inputPrompt);
    *   }
    * }
    *
    * const actionMap = new Map();
-   * actionMap.set(assistant.StandardIntents.MAIN, mainIntent);
-   * actionMap.set(assistant.StandardIntents.TEXT, rawInput);
+   * actionMap.set(action.StandardIntents.MAIN, mainIntent);
+   * actionMap.set(action.StandardIntents.TEXT, rawInput);
    *
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
    * // API.AI
-   * const assistant = new ApiAiAssistant({request: req, response: res});
+   * const action = new ApiAiAction({request: req, response: res});
    * const NAME_ACTION = 'make_name';
    * const COLOR_ARGUMENT = 'color';
    * const NUMBER_ARGUMENT = 'number';
    *
-   * function makeName (assistant) {
-   *   const number = assistant.getArgument(NUMBER_ARGUMENT);
-   *   const color = assistant.getArgument(COLOR_ARGUMENT);
-   *   assistant.tell('Alright, your silly name is ' +
+   * function makeName (action) {
+   *   const number = action.getArgument(NUMBER_ARGUMENT);
+   *   const color = action.getArgument(COLOR_ARGUMENT);
+   *   action.tell('Alright, your silly name is ' +
    *     color + ' ' + number +
    *     '! I hope you like it. See you next time.');
    * }
    *
    * const actionMap = new Map();
    * actionMap.set(NAME_ACTION, makeName);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
    * @param {(Function|Map)} handler The handler (or Map of handlers) for the request.
    * @actionssdk
@@ -344,13 +390,13 @@ const Assistant = class {
   }
 
   /**
-   * Equivalent to {@link Assistant#askForPermission|askForPermission},
+   * Equivalent to {@link Action#askForPermission|askForPermission},
    * but allows you to prompt the user for more than one permission at once.
    *
    * Notes:
    *
    * * The order in which you specify the permission prompts does not matter -
-   *   it is controlled by the assistant to provide a consistent user experience.
+   *   it is controlled by the action to provide a consistent user experience.
    * * The user will be able to either accept all permissions at once, or none.
    *   If you wish to allow them to selectively accept one or other, make several
    *   dialog turns asking for each permission independently with askForPermission.
@@ -358,38 +404,38 @@ const Assistant = class {
    *   equivalent to just asking for DEVICE_PRECISE_LOCATION
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: req, response: res});
+   * const action = new ApiAiAction({request: req, response: res});
    * const REQUEST_PERMISSION_ACTION = 'request_permission';
    * const GET_RIDE_ACTION = 'get_ride';
    *
-   * function requestPermission (assistant) {
+   * function requestPermission (action) {
    *   const permission = [
-   *     assistant.SupportedPermissions.NAME,
-   *     assistant.SupportedPermissions.DEVICE_PRECISE_LOCATION
+   *     action.SupportedPermissions.NAME,
+   *     action.SupportedPermissions.DEVICE_PRECISE_LOCATION
    *   ];
-   *   assistant.askForPermissions('To pick you up', permissions);
+   *   action.askForPermissions('To pick you up', permissions);
    * }
    *
-   * function sendRide (assistant) {
-   *   if (assistant.isPermissionGranted()) {
-   *     const displayName = assistant.getUserName().displayName;
-   *     const address = assistant.getDeviceLocation().address;
-   *     assistant.tell('I will tell your driver to pick up ' + displayName +
+   * function sendRide (action) {
+   *   if (action.isPermissionGranted()) {
+   *     const displayName = action.getUserName().displayName;
+   *     const address = action.getDeviceLocation().address;
+   *     action.tell('I will tell your driver to pick up ' + displayName +
    *         ' at ' + address);
    *   } else {
    *     // Response shows that user did not grant permission
-   *     assistant.tell('Sorry, I could not figure out where to pick you up.');
+   *     action.tell('Sorry, I could not figure out where to pick you up.');
    *   }
    * }
    * const actionMap = new Map();
    * actionMap.set(REQUEST_PERMISSION_ACTION, requestPermission);
    * actionMap.set(GET_RIDE_ACTION, sendRide);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
    * @param {string} context Context why the permission is being asked; it's the TTS
    *     prompt prefix (action phrase) we ask the user.
-   * @param {Array<string>} permissions Array of permissions Assistant supports, each of
-   *     which comes from Assistant.SupportedPermissions.
+   * @param {Array<string>} permissions Array of permissions Action supports, each of
+   *     which comes from Action.SupportedPermissions.
    * @param {Object=} dialogState JSON object the action uses to hold dialog state that
    *     will be circulated back by Assistant.
    * @return A response is sent to Assistant to ask for the user's permission; for any
@@ -413,7 +459,7 @@ const Assistant = class {
       if (permission !== this.SupportedPermissions.NAME &&
         permission !== this.SupportedPermissions.DEVICE_PRECISE_LOCATION &&
         permission !== this.SupportedPermissions.DEVICE_COARSE_LOCATION) {
-        this.handleError_('Assistant permission must be one of ' +
+        this.handleError_('Action permission must be one of ' +
           '[NAME, DEVICE_PRECISE_LOCATION, DEVICE_COARSE_LOCATION]');
         return null;
       }
@@ -434,49 +480,49 @@ const Assistant = class {
    * Asks the Assistant to guide the user to grant a permission. For example,
    * if you want your action to get access to the user's name, you would invoke
    * the askForPermission method with a context containing the reason for the request,
-   * and the assistant.SupportedPermissions.NAME permission. With this, the Assistant will ask
+   * and the action.SupportedPermissions.NAME permission. With this, the Assistant will ask
    * the user, in your agent's voice, the following: '[Context with reason for the request],
    * I'll just need to get your name from Google, is that OK?'.
    *
    * Once the user accepts or denies the request, the Assistant will fire another intent:
-   * assistant.intent.action.PERMISSION with a boolean argument: assistant.BuiltInArgNames.PERMISSION_GRANTED
+   * action.intent.action.PERMISSION with a boolean argument: action.BuiltInArgNames.PERMISSION_GRANTED
    * and, if granted, the information that you requested.
    *
    * Read more:
    *
    * * {@link https://developers.google.com/actions/reference/conversation#ExpectedIntent|Supported Permissions}
-   * * Check if the permission has been granted with {@link ActionsSdkAssistant#isPermissionGranted|isPermissionsGranted}
-   * * {@link ActionsSdkAssistant#getDeviceLocation|getDeviceLocation}
-   * * {@link Assistant#getUserName|getUserName}
+   * * Check if the permission has been granted with {@link ActionsSdkAction#isPermissionGranted|isPermissionsGranted}
+   * * {@link ActionsSdkAction#getDeviceLocation|getDeviceLocation}
+   * * {@link Action#getUserName|getUserName}
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: req, response: res});
+   * const action = new ApiAiAction({request: req, response: res});
    * const REQUEST_PERMISSION_ACTION = 'request_permission';
    * const GET_RIDE_ACTION = 'get_ride';
    *
-   * function requestPermission (assistant) {
-   *   const permission = assistant.SupportedPermissions.NAME;
-   *   assistant.askForPermission('To pick you up', permission);
+   * function requestPermission (action) {
+   *   const permission = action.SupportedPermissions.NAME;
+   *   action.askForPermission('To pick you up', permission);
    * }
    *
-   * function sendRide (assistant) {
-   *   if (assistant.isPermissionGranted()) {
-   *     const displayName = assistant.getUserName().displayName;
-   *     assistant.tell('I will tell your driver to pick up ' + displayName);
+   * function sendRide (action) {
+   *   if (action.isPermissionGranted()) {
+   *     const displayName = action.getUserName().displayName;
+   *     action.tell('I will tell your driver to pick up ' + displayName);
    *   } else {
    *     // Response shows that user did not grant permission
-   *     assistant.tell('Sorry, I could not figure out who to pick up.');
+   *     action.tell('Sorry, I could not figure out who to pick up.');
    *   }
    * }
    * const actionMap = new Map();
    * actionMap.set(REQUEST_PERMISSION_ACTION, requestPermission);
    * actionMap.set(GET_RIDE_ACTION, sendRide);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
    * @param {string} context Context why permission is asked; it's the TTS
    *     prompt prefix (action phrase) we ask the user.
    * @param {string} permission One of the permissions Assistant supports, each of
-   *     which comes from Assistant.SupportedPermissions.
+   *     which comes from Action.SupportedPermissions.
    * @param {Object=} dialogState JSON object the action uses to hold dialog state that
    *     will be circulated back by Assistant.
    * @return A response is sent to the Assistant to ask for the user's permission;
@@ -516,7 +562,7 @@ const Assistant = class {
    * @typedef {Object} User
    * @property {string} userId - Random string ID for Google user.
    * @property {UserName} userName - User name information. Null if not
-   *     requested with {@link Assistant#askForPermission|askForPermission(SupportedPermissions.NAME)}.
+   *     requested with {@link Action#askForPermission|askForPermission(SupportedPermissions.NAME)}.
    * @property {string} accessToken - Unique Oauth2 token. Only available with
    *     account linking.
    */
@@ -527,27 +573,27 @@ const Assistant = class {
    * returns null.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: req, response: res});
+   * const action = new ApiAiAction({request: req, response: res});
    * const REQUEST_PERMISSION_ACTION = 'request_permission';
    * const SAY_NAME_ACTION = 'get_name';
    *
-   * function requestPermission (assistant) {
-   *   const permission = assistant.SupportedPermissions.NAME;
-   *   assistant.askForPermission('To know who you are', permission);
+   * function requestPermission (action) {
+   *   const permission = action.SupportedPermissions.NAME;
+   *   action.askForPermission('To know who you are', permission);
    * }
    *
-   * function sayName (assistant) {
-   *   if (assistant.isPermissionGranted()) {
-   *     assistant.tell('Your name is ' + assistant.getUserName().displayName));
+   * function sayName (action) {
+   *   if (action.isPermissionGranted()) {
+   *     action.tell('Your name is ' + action.getUserName().displayName));
    *   } else {
    *     // Response shows that user did not grant permission
-   *     assistant.tell('Sorry, I could not get your name.');
+   *     action.tell('Sorry, I could not get your name.');
    *   }
    * }
    * const actionMap = new Map();
    * actionMap.set(REQUEST_PERMISSION_ACTION, requestPermission);
    * actionMap.set(SAY_NAME_ACTION, sayName);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    * @return {UserName} Null if name permission is not granted.
    * @actionssdk
    * @apiai
@@ -558,6 +604,168 @@ const Assistant = class {
   }
 
   // ---------------------------------------------------------------------------
+  //                   Multimodal Builders
+  // ---------------------------------------------------------------------------
+
+  // Build RichResponse object with chainable methods
+  buildRichResponse () {
+    const that = this;
+    const richResponse = {
+      items: [],
+      suggestions: [],
+      // Takes string, or { speech, display_text }
+      addSimpleResponse: function (simpleResponse) {
+        // Validate if RichResponse already contains two SimpleResponse objects
+        let simpleResponseCount = 0;
+        for (let item of this.items) {
+          if (item.simple_response) {
+            simpleResponseCount++;
+          }
+          if (simpleResponseCount >= 2) {
+            debug('Cannot include >2 SimpleResponses in RichResponse');
+            return this;
+          }
+        }
+        const simpleResponseObj = {
+          simple_response: that.buildSimpleResponseHelper_(simpleResponse)
+        };
+        // Check first if needs to replace BasicCard at beginning of items list
+        if (this.items.length > 0 && this.items[0].basic_card) {
+          this.items.unshift(simpleResponseObj);
+        } else {
+          this.items.push(simpleResponseObj);
+        }
+        return this;
+      },
+      // Takes BasicCard
+      addBasicCard: function (basicCard) {
+        // Validate if basic card is already present
+        for (let item of this.items) {
+          if (item.basic_card) {
+            debug('Cannot include >1 BasicCard in RichResponse');
+            return this;
+          }
+        }
+        this.items.push({
+          basic_card: basicCard
+        });
+        return this;
+      },
+      // Takes a string or array of strings of suggestions
+      addSuggestions: function (suggestions) {
+        if (Array.isArray(suggestions)) {
+          for (let suggestion of suggestions) {
+            this.suggestions.push({title: suggestion});
+          }
+        } else {
+          this.suggestions.push({title: suggestions});
+        }
+        return this;
+      },
+      // Takes two strings
+      addSuggestionLink: function (title, suggestionUrl) {
+        this.link_out_suggestion = { title: title, url: suggestionUrl };
+        return this;
+      }
+
+    };
+
+    return richResponse;
+  }
+
+  // Takes req. bodyText string
+  buildBasicCard (bodyText) {
+    const basicCard = {
+      formatted_text: bodyText,
+      buttons: [],
+      // Takes title string
+      setTitle: function (title) {
+        this.title = title;
+        return this;
+      },
+      // Takes subtitle string
+      setSubtitle: function (subtitle) {
+        this.subtitle = subtitle;
+        return this;
+      },
+      // Takes image Url string, accessibility text string
+      setImage: function (url, accessibilityText) {
+        this.image = { url: url, accessibility_text: accessibilityText };
+        return this;
+      },
+      // Takes text and image url strings
+      addButton: function (text, url) {
+        this.buttons.push({
+          title: text,
+          open_url_action: {
+            url: url
+          }
+        });
+        return this;
+      }
+    };
+
+    return basicCard;
+  }
+
+  // Takes opt. title string
+  // Could also pass in array of items
+  buildList (param) {
+    const list = {
+      title: Array.isArray(param) ? null : param,
+      items: Array.isArray(param) ? param : [],
+      // Takes item built with buildSelectionItem
+      addItem: function (item) {
+        this.items.push(item);
+        return this;
+      }
+    };
+
+    return list;
+  }
+
+  buildCarousel (param) {
+    const list = {
+      items: Array.isArray(param) ? param : [],
+      // Takes item built with buildSelectionItem
+      addItem: function (item) {
+        this.items.push(item);
+        return this;
+      }
+    };
+
+    return list;
+  }
+
+  // Takes req. key, synonyms, title
+  buildSelectionItem (key, synonyms, title) {
+    const listItem = {
+      option_info: {
+        key: key,
+        synonyms: synonyms
+      },
+      title: title,
+      // Takes string
+      setDescription: function (description) {
+        this.description = description;
+        return this;
+      },
+      // Takes string
+      setImage: function (imageUrl, accessibilityText) {
+        this.image = { url: imageUrl, accessibility_text: accessibilityText };
+        return this;
+      },
+      // Takes string
+      addSynonym: function (synonym) {
+        this.option_info.synonyms.push(synonym);
+        return this;
+      }
+    };
+
+    return listItem;
+  }
+
+  // ---------------------------------------------------------------------------
   //                   Private Helpers
   // ---------------------------------------------------------------------------
 
@@ -657,7 +865,7 @@ const Assistant = class {
     }
     // Log error
     error.apply(text, Array.prototype.slice.call(arguments, 1));
-    // Tell assistant to say error
+    // Tell action to say error
     if (this.responded_) {
       return;
     }
@@ -760,6 +968,35 @@ const Assistant = class {
     }
     return prompts;
   }
+
+  /**
+   * Helper to build SimpleResponse from speech and display text.
+   *
+   * @param {string|SimpleResponse} response String to speak, or SimpleResponse.
+   *     SSML allowed.
+   * @param {string} response.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} response.displayText If using SimpleResponse, text to be shown
+   *     to user.
+   * @return {Object} Appropriate SimpleResponse object.
+   * @private
+   */
+  buildSimpleResponseHelper_ (response) {
+    debug('buildSimpleResponseHelper_: response=%s', JSON.stringify(response));
+    let simpleResponseObj = {};
+    if (typeof response === 'string') {
+      simpleResponseObj = this.isSsml_(response)
+        ? { ssml: response } : { text_to_speech: response };
+    } else if (response.speech) {
+      simpleResponseObj = this.isSsml_(response.speech)
+        ? { ssml: response.speech } : { text_to_speech: response.speech };
+      simpleResponseObj.display_text = response.displayText;
+    } else {
+      this.handleError_('SimpleResponse requires a speech parameter.');
+      return null;
+    }
+    return simpleResponseObj;
+  }
 };
 
 /**
@@ -793,6 +1030,6 @@ const State = class {
 };
 
 module.exports = {
-  Assistant: Assistant,
+  Action: Action,
   State: State
 };
diff --git a/actions-on-google.js b/actions-on-google.js
index d9e8a45..788033a 100644
--- a/actions-on-google.js
+++ b/actions-on-google.js
@@ -21,11 +21,15 @@
 
 'use strict';
 
-const assistant = require('./assistant');
+const action = require('./action');
 
 module.exports = {
-  Assistant: assistant.Assistant,
-  State: assistant.State,
-  ActionsSdkAssistant: require('./actions-sdk-assistant'),
-  ApiAiAssistant: require('./api-ai-assistant')
+  Action: action.Action,
+  State: action.State,
+  ActionsSdkAction: require('./actions-sdk-action'),
+  ApiAiAction: require('./api-ai-action'),
+  // Backwards compatibility
+  Assistant: action.Action,
+  ActionsSdkAssistant: require('./actions-sdk-action'),
+  ApiAiAssistant: require('./api-ai-action')
 };
diff --git a/actions-sdk-assistant.js b/actions-sdk-action.js
similarity index 62%
rename from actions-sdk-assistant.js
rename to actions-sdk-action.js
index e39130b..20db6a9 100644
--- a/actions-sdk-assistant.js
+++ b/actions-sdk-action.js
@@ -24,9 +24,9 @@
 const Debug = require('debug');
 const debug = Debug('actions-on-google:debug');
 const error = Debug('actions-on-google:error');
-const assistant = require('./assistant');
-const Assistant = assistant.Assistant;
-const State = assistant.State;
+const action = require('./action');
+const Action = action.Action;
+const State = action.State;
 
 // Constants
 const CONVERSATION_API_AGENT_VERSION_HEADER = 'Agent-Version-Label';
@@ -42,12 +42,12 @@ error.log = console.error.bind(console);
 // ---------------------------------------------------------------------------
 
 /**
- * Constructor for ActionsSdkAssistant object. To be used in the Actions SDK
+ * Constructor for ActionsSdkAction object. To be used in the Actions SDK
  * HTTP endpoint logic.
  *
  * @example
- * const ActionsSdkAssistant = require('actions-on-google').ActionsSdkAssistant;
- * const assistant = new ActionsSdkAssistant({request: request, response: response,
+ * const ActionsSdkAction = require('actions-on-google').ActionsSdkAction;
+ * const action = new ActionsSdkAction({request: request, response: response,
  *   sessionStarted:sessionStarted});
  *
  * @param {Object} options JSON configuration.
@@ -56,9 +56,9 @@ error.log = console.error.bind(console);
  * @param {Function=} options.sessionStarted Function callback when session starts.
  * @actionssdk
  */
-const ActionsSdkAssistant = class extends Assistant {
+const ActionsSdkAction = class extends Action {
   constructor (options) {
-    debug('ActionsSdkAssistant constructor');
+    debug('ActionsSdkAction constructor');
     super(options);
 
     if (this.body_ &&
@@ -76,8 +76,8 @@ const ActionsSdkAssistant = class extends Assistant {
    * Gets the request Conversation API version.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
-   * const apiVersion = assistant.getApiVersion();
+   * const action = new ActionsSdkAction({request: request, response: response});
+   * const apiVersion = action.getApiVersion();
    *
    * @return {string} Version value or null if no value.
    * @actionssdk
@@ -91,8 +91,8 @@ const ActionsSdkAssistant = class extends Assistant {
    * Gets the user's raw input query.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
-   * assistant.tell('You said ' + assistant.getRawInput());
+   * const action = new ActionsSdkAction({request: request, response: response});
+   * action.tell('You said ' + action.getRawInput());
    *
    * @return {string} User's raw query or null if no value.
    * @actionssdk
@@ -118,11 +118,11 @@ const ActionsSdkAssistant = class extends Assistant {
 
   /**
    * Gets previous JSON dialog state that the action sent to Assistant.
-   * Alternatively, use the assistant.data field to store JSON values between requests.
+   * Alternatively, use the action.data field to store JSON values between requests.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
-   * const dialogState = assistant.getDialogState();
+   * const action = new ActionsSdkAction({request: request, response: response});
+   * const dialogState = action.getDialogState();
    *
    * @return {Object} JSON object provided to the Assistant in the previous
    *     user turn or {} if no value.
@@ -140,11 +140,11 @@ const ActionsSdkAssistant = class extends Assistant {
    * Gets the {@link User} object.
    * The user object contains information about the user, including
    * a string identifier and personal information (requires requesting permissions,
-   * see {@link Assistant#askForPermissions|askForPermissions}).
+   * see {@link Action#askForPermissions|askForPermissions}).
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
-   * const userId = assistant.getUser().userId;
+   * const action = new ActionsSdkAction({request: request, response: response});
+   * const userId = action.getUser().userId;
    *
    * @return {User} Null if no value.
    * @actionssdk
@@ -172,18 +172,85 @@ const ActionsSdkAssistant = class extends Assistant {
   }
 
   /**
+   * Returns true if user device has a given capability.
+   *
+   * @param {string} capability Must be one of ActionsSdkAction.SurfaceCapabilities.
+   * @return {boolean} True if user device has given capability.
+   * @actionssdk
+   */
+  hasSurfaceCapability (requestedCapability) {
+    debug('hasSurfaceCapability');
+    if (!(this.body_.surface &&
+      this.body_.surface.capabilities)) {
+      this.handleError_('No surface capabilities in incoming request');
+      return null;
+    }
+    for (let capability of this.body_.surface.capabilities) {
+      if (capability.name === requestedCapability) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Gets surface capabilities of user device.
+   *
+   * @return {Array<string>} Supported surface capabilities, as defined in
+   *     ActionsSdkAction.SurfaceCapabilities.
+   * @actionssdk
+   */
+  getSurfaceCapabilities () {
+    debug('getSurfaceCapabilities');
+    if (!(this.body_.surface &&
+      this.body_.surface.capabilities)) {
+      this.handleError_('No surface capabilities in incoming request');
+      return null;
+    }
+    const capabilities = [];
+    for (let capability of this.body_.surface.capabilities) {
+      capabilities.push(capability.name);
+    }
+    return capabilities;
+  }
+
+  /**
+   * Gets type of input given in this request.
+   *
+   * @return {number} One of ActionsSdkAction.InputTypes. Null if no input type given.
+   * @actionssdk
+   */
+  getInputType () {
+    debug('getInputType');
+    if (this.body_ && this.body_.inputs) {
+      for (let input of this.body_.inputs) {
+        if (input.raw_inputs) {
+          for (let rawInput of input.raw_inputs) {
+            if (rawInput.input_type) {
+              return rawInput.input_type;
+            }
+          }
+        }
+      }
+    } else {
+      this.handleError_('No input type in incoming request');
+      return null;
+    }
+  }
+
+  /**
    * If granted permission to device's location in previous intent, returns device's
-   * location (see {@link Assistant#askForPermissions|askForPermissoins}).
+   * location (see {@link Action#askForPermissions|askForPermissoins}).
    * If device info is unavailable, returns null.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: req, response: res});
-   * assistant.askForPermission("To get you a ride",
-   *   assistant.SupportedPermissions.DEVICE_PRECISE_LOCATION);
+   * const action = new ActionsSdkAction({request: req, response: res});
+   * action.askForPermission("To get you a ride",
+   *   action.SupportedPermissions.DEVICE_PRECISE_LOCATION);
    * // ...
    * // In response handler for subsequent intent:
-   * if (assistant.isPermissionGranted()) {
-   *   sendCarTo(assistant.getDeviceLocation().coordinates);
+   * if (action.isPermissionGranted()) {
+   *   sendCarTo(action.getDeviceLocation().coordinates);
    * }
    *
    * @return {DeviceLocation} Null if location permission is not granted.
@@ -206,17 +273,17 @@ const ActionsSdkAssistant = class extends Assistant {
   /**
    * Returns true if the request follows a previous request asking for
    * permission from the user and the user granted the permission(s). Otherwise,
-   * false. Use with {@link Assistant#askForPermissions|askForPermissions}.
+   * false. Use with {@link Action#askForPermissions|askForPermissions}.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
-   * assistant.askForPermissions("To get you a ride", [
-   *   assistant.SupportedPermissions.NAME,
-   *   assistant.SupportedPermissions.DEVICE_PRECISE_LOCATION
+   * const action = new ActionsSdkAction({request: request, response: response});
+   * action.askForPermissions("To get you a ride", [
+   *   action.SupportedPermissions.NAME,
+   *   action.SupportedPermissions.DEVICE_PRECISE_LOCATION
    * ]);
    * // ...
    * // In response handler for subsequent intent:
-   * if (assistant.isPermissionGranted()) {
+   * if (action.isPermissionGranted()) {
    *  // Use the requested permission(s) to get the user a ride
    * }
    *
@@ -233,8 +300,8 @@ const ActionsSdkAssistant = class extends Assistant {
    * Used by actions to do version control.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
-   * const actionVersionLabel = assistant.getActionVersionLabel();
+   * const action = new ActionsSdkAction({request: request, response: response});
+   * const actionVersionLabel = action.getActionVersionLabel();
    *
    * @return {string} The specified version label or null if unspecified.
    * @actionssdk
@@ -254,8 +321,8 @@ const ActionsSdkAssistant = class extends Assistant {
    * and stays the same until the end of the conversation.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
-   * const conversationId = assistant.getConversationId();
+   * const action = new ActionsSdkAction({request: request, response: response});
+   * const conversationId = action.getConversationId();
    *
    * @return {string} Conversation ID or null if no value.
    * @actionssdk
@@ -271,27 +338,27 @@ const ActionsSdkAssistant = class extends Assistant {
 
   /**
    * Get the current intent. Alternatively, using a handler Map with
-   * {@link Assistant#handleRequest|handleRequest}, the client library will
+   * {@link Action#handleRequest|handleRequest}, the client library will
    * automatically handle the incoming intents.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
+   * const action = new ActionsSdkAction({request: request, response: response});
    *
-   * function responseHandler (assistant) {
-   *   const intent = assistant.getIntent();
+   * function responseHandler (action) {
+   *   const intent = action.getIntent();
    *   switch (intent) {
-   *     case assistant.StandardIntents.MAIN:
-   *       const inputPrompt = assistant.buildInputPrompt(false, 'Welcome to action snippets! Say anything.');
-   *       assistant.ask(inputPrompt);
+   *     case action.StandardIntents.MAIN:
+   *       const inputPrompt = action.buildInputPrompt(false, 'Welcome to action snippets! Say anything.');
+   *       action.ask(inputPrompt);
    *       break;
    *
-   *     case assistant.StandardIntents.TEXT:
-   *       assistant.tell('You said ' + assistant.getRawInput());
+   *     case action.StandardIntents.TEXT:
+   *       action.tell('You said ' + action.getRawInput());
    *       break;
    *   }
    * }
    *
-   * assistant.handleRequest(responseHandler);
+   * action.handleRequest(responseHandler);
    *
    * @return {string} Intent id or null if no value.
    * @actionssdk
@@ -307,8 +374,7 @@ const ActionsSdkAssistant = class extends Assistant {
   }
 
   /**
-   * Get the argument value by name from the current intent. If the argument
-   * is not a text argument, the entire argument object is returned.
+   * Get the argument value by name from the current intent.
    *
    * @param {string} argName Name of the argument.
    * @return {string} Argument value matching argName
@@ -323,13 +389,15 @@ const ActionsSdkAssistant = class extends Assistant {
     }
     const argument = this.getArgument_(argName);
     if (!argument) {
-      debug('Failed to get argument value: %s', argName);
       return null;
-    } else if (argument.text_value) {
+    }
+    if (argument.text_value) {
       return argument.text_value;
-    } else {
-      return argument;
+    } else if (argument.raw_text) {
+      return argument.raw_text;
     }
+    debug('Failed to get argument value: %s', argName);
+    return null;
   }
 
   /**
@@ -337,34 +405,38 @@ const ActionsSdkAssistant = class extends Assistant {
    * the action.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
+   * const action = new ActionsSdkAction({request: request, response: response});
    *
-   * function mainIntent (assistant) {
-   *   const inputPrompt = assistant.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
+   * function mainIntent (action) {
+   *   const inputPrompt = action.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
    *         'I can read out an ordinal like ' +
    *         '<say-as interpret-as="ordinal">123</say-as>. Say a number.</speak>',
    *         ['I didn\'t hear a number', 'If you\'re still there, what\'s the number?', 'What is the number?']);
-   *   assistant.ask(inputPrompt);
+   *   action.ask(inputPrompt);
    * }
    *
-   * function rawInput (assistant) {
-   *   if (assistant.getRawInput() === 'bye') {
-   *     assistant.tell('Goodbye!');
+   * function rawInput (action) {
+   *   if (action.getRawInput() === 'bye') {
+   *     action.tell('Goodbye!');
    *   } else {
-   *     const inputPrompt = assistant.buildInputPrompt(true, '<speak>You said, <say-as interpret-as="ordinal">' +
-   *       assistant.getRawInput() + '</say-as></speak>',
+   *     const inputPrompt = action.buildInputPrompt(true, '<speak>You said, <say-as interpret-as="ordinal">' +
+   *       action.getRawInput() + '</say-as></speak>',
    *         ['I didn\'t hear a number', 'If you\'re still there, what\'s the number?', 'What is the number?']);
-   *     assistant.ask(inputPrompt);
+   *     action.ask(inputPrompt);
    *   }
    * }
    *
    * const actionMap = new Map();
-   * actionMap.set(assistant.StandardIntents.MAIN, mainIntent);
-   * actionMap.set(assistant.StandardIntents.TEXT, rawInput);
+   * actionMap.set(action.StandardIntents.MAIN, mainIntent);
+   * actionMap.set(action.StandardIntents.TEXT, rawInput);
    *
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
-   * @param {Object} inputPrompt Holding initial and no-input prompts.
+   * @param {Object} inputPrompt Holding rich, initial and no-input prompts.
+   * @param {string} inputPrompt.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} inputPrompt.displayText If using SimpleResponse, text to be shown
+   *     to user.
    * @param {Object=} dialogState JSON object the action uses to hold dialog state that
    *     will be circulated back by Assistant.
    * @return The response that is sent to Assistant to ask user to provide input.
@@ -373,58 +445,102 @@ const ActionsSdkAssistant = class extends Assistant {
   ask (inputPrompt, dialogState) {
     debug('ask: inputPrompt=%s, dialogState=%s',
        JSON.stringify(inputPrompt), JSON.stringify(dialogState));
-    if (!inputPrompt) {
-      this.handleError_('Invalid input prompt');
-      return null;
-    }
-    if (typeof inputPrompt === 'string') {
-      inputPrompt = this.buildInputPrompt(this.isSsml_(inputPrompt), inputPrompt);
-    }
-    if (!dialogState) {
-      dialogState = {
-        'state': (this.state instanceof State ? this.state.getName() : this.state),
-        'data': this.data
-      };
-    } else if (Array.isArray(dialogState)) {
-      this.handleError_('Invalid dialog state');
-      return null;
-    }
     const expectedIntent = this.buildExpectedIntent_(this.StandardIntents.TEXT, []);
     return this.buildAskHelper_(inputPrompt, [expectedIntent], dialogState);
   }
 
   /**
+   * Asks Assistant to collect user's input with a list.
+   *
+   * @param {Object} inputPrompt Holding rich, initial and no-input prompts.
+   * @param {string} inputPrompt.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} inputPrompt.displayText If using SimpleResponse, text to be shown
+   *     to user.
+   * @param {Object} list List built with ActionsSdk.buildList.
+   * @param {string} optionType Type of options to choose from.
+   * @param {Object=} dialogState JSON object the action uses to hold dialog state that
+   *     will be circulated back by Assistant.
+   * @return The response that is sent to Assistant to ask user to provide input.
+   * @actionssdk
+   */
+  askWithList (inputPrompt, list, optionType, dialogState) {
+    debug('ask: inputPrompt=%s, dialogState=%s',
+      JSON.stringify(inputPrompt), JSON.stringify(dialogState));
+    const expectedIntent = this.buildExpectedIntent_(this.StandardIntents.OPTION, []);
+    expectedIntent.input_value_spec = {
+      option_value_spec: {
+        name: '$'.concat(optionType),
+        list_select: list
+      }
+    };
+    return this.buildAskHelper_(inputPrompt, [expectedIntent], dialogState);
+  }
+
+  /**
+   * Asks Assistant to collect user's input with a carousel.
+   *
+   * @param {Object} inputPrompt Holding rich, initial and no-input prompts.
+   * @param {string} inputPrompt.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} inputPrompt.displayText If using SimpleResponse, text to be shown
+   *     to user.
+   * @param {Object} carousel Carousel built with ActionsSdk.buildCarousel.
+   * @param {string} optionType Type of options to choose from.
+   * @param {Object=} dialogState JSON object the action uses to hold dialog state that
+   *     will be circulated back by Assistant.
+   * @return The response that is sent to Assistant to ask user to provide input.
+   * @actionssdk
+   */
+  askWithCarousel (inputPrompt, carousel, optionType, dialogState) {
+    debug('ask: inputPrompt=%s, dialogState=%s',
+      JSON.stringify(inputPrompt), JSON.stringify(dialogState));
+    const expectedIntent = this.buildExpectedIntent_(this.StandardIntents.OPTION, []);
+    expectedIntent.input_value_spec = {
+      option_value_spec: {
+        name: '$'.concat(optionType),
+        carousel_select: carousel
+      }
+    };
+    return this.buildAskHelper_(inputPrompt, [expectedIntent], dialogState);
+  }
+
+  /**
    * Tells Assistant to render the speech response and close the mic.
    *
    * @example
-   * const assistant = new ActionsSdkAssistant({request: request, response: response});
+   * const action = new ActionsSdkAction({request: request, response: response});
    *
-   * function mainIntent (assistant) {
-   *   const inputPrompt = assistant.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
+   * function mainIntent (action) {
+   *   const inputPrompt = action.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
    *         'I can read out an ordinal like ' +
    *         '<say-as interpret-as="ordinal">123</say-as>. Say a number.</speak>',
    *         ['I didn\'t hear a number', 'If you\'re still there, what\'s the number?', 'What is the number?']);
-   *   assistant.ask(inputPrompt);
+   *   action.ask(inputPrompt);
    * }
    *
-   * function rawInput (assistant) {
-   *   if (assistant.getRawInput() === 'bye') {
-   *     assistant.tell('Goodbye!');
+   * function rawInput (action) {
+   *   if (action.getRawInput() === 'bye') {
+   *     action.tell('Goodbye!');
    *   } else {
-   *     const inputPrompt = assistant.buildInputPrompt(true, '<speak>You said, <say-as interpret-as="ordinal">' +
-   *       assistant.getRawInput() + '</say-as></speak>',
+   *     const inputPrompt = action.buildInputPrompt(true, '<speak>You said, <say-as interpret-as="ordinal">' +
+   *       action.getRawInput() + '</say-as></speak>',
    *         ['I didn\'t hear a number', 'If you\'re still there, what\'s the number?', 'What is the number?']);
-   *     assistant.ask(inputPrompt);
+   *     action.ask(inputPrompt);
    *   }
    * }
    *
    * const actionMap = new Map();
-   * actionMap.set(assistant.StandardIntents.MAIN, mainIntent);
-   * actionMap.set(assistant.StandardIntents.TEXT, rawInput);
+   * actionMap.set(action.StandardIntents.MAIN, mainIntent);
+   * actionMap.set(action.StandardIntents.TEXT, rawInput);
    *
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
-   * @param {string} textToSpeech Final spoken response. Spoken response can be SSML.
+   * @param {string} textToSpeech Final rich/spoken response. Spoken response can be SSML.
+   * @param {string} textToSpeech.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} textToSpeech.displayText If using SimpleResponse, text to be shown
+   *     to user.
    * @return The HTTP response that is sent back to Assistant.
    * @actionssdk
    */
@@ -435,14 +551,27 @@ const ActionsSdkAssistant = class extends Assistant {
       return null;
     }
     const finalResponse = {};
-    if (this.isSsml_(textToSpeech)) {
-      finalResponse.speech_response = {
-        ssml: textToSpeech
-      };
+    if (typeof textToSpeech === 'string') {
+      if (this.isSsml_(textToSpeech)) {
+        finalResponse.speech_response = {
+          ssml: textToSpeech
+        };
+      } else {
+        finalResponse.speech_response = {
+          text_to_speech: textToSpeech
+        };
+      }
     } else {
-      finalResponse.speech_response = {
-        text_to_speech: textToSpeech
-      };
+      if (textToSpeech.items) { // Check for RichResponse
+        finalResponse.rich_response = textToSpeech;
+      } else if (textToSpeech.speech) { // Check for SimpleResponse
+        finalResponse.rich_response = this.buildRichResponse()
+          .addSimpleResponse(textToSpeech);
+      } else {
+        this.handleError_('Invalid speech response. Must be string, ' +
+          'RichResponse or SimpleResponse.');
+        return null;
+      }
     }
     const response = this.buildResponseHelper_(null, false, null, finalResponse);
     return this.doResponse_(response, RESPONSE_CODE_OK);
@@ -452,8 +581,8 @@ const ActionsSdkAssistant = class extends Assistant {
    * Builds the {@link https://developers.google.com/actions/reference/conversation#InputPrompt|InputPrompt object}
    * from initial prompt and no-input prompts.
    *
-   * The Assistant needs one initial prompt to start the conversation. If there is no user response,
-   * the Assistant re-opens the mic and renders the no-input prompts three times
+   * The Action needs one initial prompt to start the conversation. If there is no user response,
+   * the Action re-opens the mic and renders the no-input prompts three times
    * (one for each no-input prompt that was configured) to help the user
    * provide the right response.
    *
@@ -461,12 +590,12 @@ const ActionsSdkAssistant = class extends Assistant {
    * good user experience.
    *
    * @example
-   * const inputPrompt = assistant.buildInputPrompt(false, 'Welcome to action snippets! Say a number.',
+   * const inputPrompt = action.buildInputPrompt(false, 'Welcome to action snippets! Say a number.',
    *     ['Say any number', 'Pick a number', 'What is the number?']);
-   * assistant.ask(inputPrompt);
+   * action.ask(inputPrompt);
    *
    * @param {boolean} isSsml Indicates whether the text to speech is SSML or not.
-   * @param {string} initialPrompt The initial prompt the Assistant asks the user.
+   * @param {string} initialPrompt The initial prompt the Action asks the user.
    * @param {Array<string>=} noInputs Array of re-prompts when the user does not respond (max 3).
    * @return {Object} An {@link https://developers.google.com/actions/reference/conversation#InputPrompt|InputPrompt object}.
    * @actionssdk
@@ -639,19 +768,13 @@ const ActionsSdkAssistant = class extends Assistant {
     };
     // Send an Ask request to Assistant.
     const inputPrompt = this.buildInputPrompt(false, 'PLACEHOLDER_FOR_PERMISSION');
-    if (!dialogState) {
-      dialogState = {
-        'state': (this.state instanceof State ? this.state.getName() : this.state),
-        'data': this.data
-      };
-    }
     return this.buildAskHelper_(inputPrompt, [expectedIntent], dialogState);
   }
 
   /**
    * Builds the ask response to send back to Assistant.
    *
-   * @param {Object} inputPrompt Holding initial and no-input prompts.
+   * @param {Object} inputPrompt Holding rich, initial and no-input prompts.
    * @param {Array} possibleIntents Array of ExpectedIntents.
    * @param {Object} dialogState JSON object the action uses to hold dialog state that
    *     will be circulated back by Assistant.
@@ -668,12 +791,22 @@ const ActionsSdkAssistant = class extends Assistant {
     }
     if (typeof inputPrompt === 'string') {
       inputPrompt = this.buildInputPrompt(this.isSsml_(inputPrompt), inputPrompt);
+    } else {
+      if (inputPrompt.speech) { // Check for SimpleResponse
+        inputPrompt = { rich_initial_prompt: this.buildRichResponse()
+          .addSimpleResponse(inputPrompt) };
+      } else if (inputPrompt.items) { // Check for RichResponse
+        inputPrompt = { rich_initial_prompt: inputPrompt };
+      }
     }
     if (!dialogState) {
       dialogState = {
         'state': (this.state instanceof State ? this.state.getName() : this.state),
         'data': this.data
       };
+    } else if (Array.isArray(dialogState)) {
+      this.handleError_('Invalid dialog state');
+      return null;
     }
     const expectedInputs = [{
       input_prompt: inputPrompt,
@@ -689,13 +822,13 @@ const ActionsSdkAssistant = class extends Assistant {
   }
 
   /**
-   * Builds an ExpectedIntent object. Refer to {@link ActionsSdkAssistant#newRuntimeEntity} to create the list
+   * Builds an ExpectedIntent object. Refer to {@link ActionsSdkAction#newRuntimeEntity} to create the list
    * of runtime entities required by this method. Runtime entities need to be defined in
    * the Action Package.
    *
    * @param {string} intent Developer specified in-dialog intent inside the Action
    *     Package or an Assistant built-in intent like
-   *     'assistant.intent.action.TEXT'.
+   *     'action.intent.action.TEXT'.
    * @return {Object} An {@link https://developers.google.com/actions/reference/conversation#ExpectedIntent|ExpectedIntent object}
          encapsulating the intent and the runtime entities.
    * @private
@@ -714,4 +847,4 @@ const ActionsSdkAssistant = class extends Assistant {
   }
 };
 
-module.exports = ActionsSdkAssistant;
+module.exports = ActionsSdkAction;
diff --git a/api-ai-assistant.js b/api-ai-action.js
similarity index 63%
rename from api-ai-assistant.js
rename to api-ai-action.js
index 4ef7518..94246f6 100644
--- a/api-ai-assistant.js
+++ b/api-ai-action.js
@@ -23,16 +23,15 @@
 const Debug = require('debug');
 const debug = Debug('actions-on-google:debug');
 const error = Debug('actions-on-google:error');
-const assistant = require('./assistant');
-const Assistant = assistant.Assistant;
-const State = assistant.State;
+const action = require('./action');
+const Action = action.Action;
+const State = action.State;
 
 // Constants
 const RESPONSE_CODE_OK = 200;
 const ACTIONS_API_AI_CONTEXT = '_actions_on_google_';
 const MAX_LIFESPAN = 100;
 const INPUTS_MAX = 3;
-const ORIGINAL_SUFFIX = '.original';
 
 // Configure logging for hosting platforms that only support console.log and console.error
 debug.log = console.log.bind(console);
@@ -43,12 +42,12 @@ error.log = console.error.bind(console);
 // ---------------------------------------------------------------------------
 
 /**
- * Constructor for ApiAiAssistant object. To be used in the API.AI
+ * Constructor for ApiAiAction object. To be used in the API.AI
  * fulfillment webhook logic.
  *
  * @example
- * const ApiAiAssistant = require('actions-on-google').ApiAiAssistant;
- * const assistant = new ApiAiAssistant({request: request, response: response,
+ * const ApiAiAction = require('actions-on-google').ApiAiAction;
+ * const action = new ApiAiAction({request: request, response: response,
  *   sessionStarted:sessionStarted});
  *
  * @param {Object} options JSON configuration.
@@ -59,9 +58,9 @@ error.log = console.error.bind(console);
  *     called from Web Simulator or Google Home device (i.e., not API.AI simulator).
  * @apiai
  */
-const ApiAiAssistant = class extends Assistant {
+const ApiAiAction = class extends Action {
   constructor (options) {
-    debug('ApiAiAssistant constructor');
+    debug('ApiAiAction constructor');
     super(options);
 
     if (this.body_.originalRequest &&
@@ -81,11 +80,11 @@ const ApiAiAssistant = class extends Assistant {
    * Gets the {@link User} object.
    * The user object contains information about the user, including
    * a string identifier and personal information (requires requesting permissions,
-   * see {@link Assistant#askForPermissions|askForPermissions}).
+   * see {@link Action#askForPermissions|askForPermissions}).
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
-   * const userId = assistant.getUser().userId;
+   * const action = new ApiAiAction({request: request, response: response});
+   * const userId = action.getUser().userId;
    *
    * @return {User} Null if no value.
    * @apiai
@@ -115,18 +114,90 @@ const ApiAiAssistant = class extends Assistant {
   }
 
   /**
+   * Returns true if user device has a given capability.
+   *
+   * @param {string} capability Must be one of ApiAiAction.SurfaceCapabilities.
+   * @return {boolean} True if user device has given capability.
+   * @apiai
+   */
+  hasSurfaceCapability (requestedCapability) {
+    debug('hasSurfaceCapability');
+    if (!(this.body_.originalRequest &&
+      this.body_.originalRequest.data &&
+      this.body_.originalRequest.data.surface &&
+      this.body_.originalRequest.data.surface.capabilities)) {
+      this.handleError_('No surface capabilities in incoming request');
+      return null;
+    }
+    for (let capability of this.body_.originalRequest.data.surface.capabilities) {
+      if (capability.name === requestedCapability) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Gets surface capabilities of user device.
+   *
+   * @return {Array<string>} Supported surface capabilities, as defined in
+   *     ApiAiAction.SurfaceCapabilities.
+   * @apiai
+   */
+  getSurfaceCapabilities () {
+    debug('getSurfaceCapabilities');
+    if (!(this.body_.originalRequest &&
+      this.body_.originalRequest.data &&
+      this.body_.originalRequest.data.surface &&
+      this.body_.originalRequest.data.surface.capabilities)) {
+      this.handleError_('No surface capabilities in incoming request');
+      return null;
+    }
+    const capabilities = [];
+    for (let capability of this.body_.originalRequest.data.surface.capabilities) {
+      capabilities.push(capability.name);
+    }
+    return capabilities;
+  }
+
+  /**
+   * Gets type of input given in this request.
+   *
+   * @return {number} One of ApiAiAction.InputTypes. Null if no input type given.
+   * @apiai
+   */
+  getInputType () {
+    debug('getInputType');
+    if (this.body_.originalRequest && this.body_.originalRequest.data &&
+      this.body_.originalRequest.data.inputs) {
+      for (let input of this.body_.originalRequest.data.inputs) {
+        if (input.raw_inputs) {
+          for (let rawInput of input.raw_inputs) {
+            if (rawInput.input_type) {
+              return rawInput.input_type;
+            }
+          }
+        }
+      }
+    } else {
+      this.handleError_('No input type in incoming request');
+      return null;
+    }
+  }
+
+  /**
    * If granted permission to device's location in previous intent, returns device's
-   * location (see {@link Assistant#askForPermissions|askForPermissions}).
+   * location (see {@link Action#askForPermissions|askForPermissions}).
    * If device info is unavailable, returns null.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: req, response: res});
-   * assistant.askForPermission("To get you a ride",
-   *   assistant.SupportedPermissions.DEVICE_PRECISE_LOCATION);
+   * const action = new ApiAiAction({request: req, response: res});
+   * action.askForPermission("To get you a ride",
+   *   action.SupportedPermissions.DEVICE_PRECISE_LOCATION);
    * // ...
    * // In response handler for permissions fallback intent:
-   * if (assistant.isPermissionGranted()) {
-   *   sendCarTo(assistant.getDeviceLocation().coordinates);
+   * if (action.isPermissionGranted()) {
+   *   sendCarTo(action.getDeviceLocation().coordinates);
    * }
    *
    * @return {DeviceLocation} Null if location permission is not granted.
@@ -149,17 +220,17 @@ const ApiAiAssistant = class extends Assistant {
   /**
    * Returns true if the request follows a previous request asking for
    * permission from the user and the user granted the permission(s). Otherwise,
-   * false. Use with {@link Assistant#askForPermissions|askForPermissions}.
+   * false. Use with {@link Action#askForPermissions|askForPermissions}.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
-   * assistant.askForPermissions("To get you a ride", [
-   *   assistant.SupportedPermissions.NAME,
-   *   assistant.SupportedPermissions.DEVICE_PRECISE_LOCATION
+   * const action = new ApiAiAction({request: request, response: response});
+   * action.askForPermissions("To get you a ride", [
+   *   action.SupportedPermissions.NAME,
+   *   action.SupportedPermissions.DEVICE_PRECISE_LOCATION
    * ]);
    * // ...
    * // In response handler for permissions fallback intent:
-   * if (assistant.isPermissionGranted()) {
+   * if (action.isPermissionGranted()) {
    *  // Use the requested permission(s) to get the user a ride
    * }
    *
@@ -204,27 +275,27 @@ const ApiAiAssistant = class extends Assistant {
 
   /**
    * Get the current intent. Alternatively, using a handler Map with
-   * {@link Assistant#handleRequest|handleRequest},
+   * {@link Action#handleRequest|handleRequest},
    * the client library will automatically handle the incoming intents.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
+   * const action = new ApiAiAction({request: request, response: response});
    *
-   * function responseHandler (assistant) {
-   *   const intent = assistant.getIntent();
+   * function responseHandler (action) {
+   *   const intent = action.getIntent();
    *   switch (intent) {
    *     case WELCOME_INTENT:
-   *       assistant.ask('Welcome to action snippets! Say a number.');
+   *       action.ask('Welcome to action snippets! Say a number.');
    *       break;
    *
    *     case NUMBER_INTENT:
-   *       const number = assistant.getArgument(NUMBER_ARGUMENT);
-   *       assistant.tell('You said ' + number);
+   *       const number = action.getArgument(NUMBER_ARGUMENT);
+   *       action.tell('You said ' + number);
    *       break;
    *   }
    * }
    *
-   * assistant.handleRequest(responseHandler);
+   * action.handleRequest(responseHandler);
    *
    * @return {string} Intent id or null if no value.
    * @apiai
@@ -240,28 +311,26 @@ const ApiAiAssistant = class extends Assistant {
   }
 
   /**
-   * Get the argument value by name from the current intent. If the argument
-   * is included in originalRequest, and is not a text argument, the entire
-   * argument object is returned.
+   * Get the argument value by name from the current intent.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
+   * const action = new ApiAiAction({request: request, response: response});
    * const WELCOME_INTENT = 'input.welcome';
    * const NUMBER_INTENT = 'input.number';
    *
-   * function welcomeIntent (assistant) {
-   *   assistant.ask('Welcome to action snippets! Say a number.');
+   * function welcomeIntent (action) {
+   *   action.ask('Welcome to action snippets! Say a number.');
    * }
    *
-   * function numberIntent (assistant) {
-   *   const number = assistant.getArgument(NUMBER_ARGUMENT);
-   *   assistant.tell('You said ' + number);
+   * function numberIntent (action) {
+   *   const number = action.getArgument(NUMBER_ARGUMENT);
+   *   action.tell('You said ' + number);
    * }
    *
    * const actionMap = new Map();
    * actionMap.set(WELCOME_INTENT, welcomeIntent);
    * actionMap.set(NUMBER_INTENT, numberIntent);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
    * @param {string} argName Name of the argument.
    * @return {Object} Argument value matching argName
@@ -278,16 +347,12 @@ const ApiAiAssistant = class extends Assistant {
       return this.body_.result.parameters[argName];
     }
     if (this.body_.originalRequest && this.body_.originalRequest.data &&
-      this.body_.originalRequest.data.inputs) {
+        this.body_.originalRequest.data.inputs) {
       for (let input of this.body_.originalRequest.data.inputs) {
         if (input.arguments) {
           for (let argument of input.arguments) {
             if (argument.name === argName) {
-              if (argument.text_value) {
-                return argument.text_value;
-              } else {
-                return argument;
-              }
+              return argument.text_value;
             }
           }
         }
@@ -298,72 +363,6 @@ const ApiAiAssistant = class extends Assistant {
   }
 
   /**
-   * Get the context argument value by name from the current intent. Context
-   * arguments include parameters collected in previous intents during the
-   * lifespan of the given context. If the context argument has an original
-   * value, usually representing the underlying entity value, that will be given
-   * as part of the return object.
-   *
-   * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
-   * const WELCOME_INTENT = 'input.welcome';
-   * const NUMBER_INTENT = 'input.number';
-   * const OUT_CONTEXT = 'output_context';
-   * const NUMBER_ARG = 'myNumberArg';
-   *
-   * function welcomeIntent (assistant) {
-   *   const parameters = {};
-   *   parameters[NUMBER_ARG] = '42';
-   *   assistant.setContext(OUT_CONTEXT, 1, parameters);
-   *   assistant.ask('Welcome to action snippets! Ask me for your number.');
-   * }
-   *
-   * function numberIntent (assistant) {
-   *   const number = assistant.getContextArgument(OUT_CONTEXT, NUMBER_ARG);
-   *   // number === { value: 42 }
-   *   assistant.tell('Your number is  ' + number.value);
-   * }
-   *
-   * const actionMap = new Map();
-   * actionMap.set(WELCOME_INTENT, welcomeIntent);
-   * actionMap.set(NUMBER_INTENT, numberIntent);
-   * assistant.handleRequest(actionMap);
-   *
-   * @param {string} contextName Name of the context.
-   * @param {string} argName Name of the argument.
-   * @return {Object} Object containing value property and optional original
-   *     property matching context argument. Null if no matching argument.
-   * @apiai
-   */
-  getContextArgument (contextName, argName) {
-    debug('getContextArgument: contextName=%s, argName=%s', contextName, argName);
-    if (!contextName) {
-      this.handleError_('Invalid context name');
-      return null;
-    }
-    if (!argName) {
-      this.handleError_('Invalid argument name');
-      return null;
-    }
-    if (!this.body_.result ||
-      !this.body_.result.contexts) {
-      this.handleError_('No contexts included in request');
-      return null;
-    }
-    for (let context of this.body_.result.contexts) {
-      if (context.name === contextName && context.parameters[argName]) {
-        let argument = { value: context.parameters[argName] };
-        if (context.parameters[argName + ORIGINAL_SUFFIX]) {
-          argument.original = context.parameters[argName + ORIGINAL_SUFFIX];
-        }
-        return argument;
-      }
-    }
-    debug('Failed to get context argument value: %s', argName);
-    return null;
-  }
-
-  /**
    * Asks Assistant to collect the user's input.
    *
    * NOTE: Due to a bug, if you specify the no-input prompts,
@@ -371,41 +370,91 @@ const ApiAiAssistant = class extends Assistant {
    * for a bye message until the bug is fixed.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
+   * const action = new ApiAiAction({request: request, response: response});
    * const WELCOME_INTENT = 'input.welcome';
    * const NUMBER_INTENT = 'input.number';
    *
-   * function welcomeIntent (assistant) {
-   *   assistant.ask('Welcome to action snippets! Say a number.',
+   * function welcomeIntent (action) {
+   *   action.ask('Welcome to action snippets! Say a number.',
    *     ['Say any number', 'Pick a number', 'What is the number?']);
    * }
    *
-   * function numberIntent (assistant) {
-   *   const number = assistant.getArgument(NUMBER_ARGUMENT);
-   *   assistant.tell('You said ' + number);
+   * function numberIntent (action) {
+   *   const number = action.getArgument(NUMBER_ARGUMENT);
+   *   action.tell('You said ' + number);
    * }
    *
    * const actionMap = new Map();
    * actionMap.set(WELCOME_INTENT, welcomeIntent);
    * actionMap.set(NUMBER_INTENT, numberIntent);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
-   * @param {string} inputPrompt The input prompt text.
+   * @param {string|RichResponse|SimpleResponse} inputPrompt The input prompt text/response.
+   * @param {string} inputPrompt.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} inputPrompt.displayText If using SimpleResponse, text to be shown
+   *     to user.
    * @param {Array<string>=} noInputs Array of re-prompts when the user does not respond (max 3).
    * @return {Object} HTTP response.
    * @apiai
    */
   ask (inputPrompt, noInputs) {
     debug('ask: inputPrompt=%s, noInputs=%s', inputPrompt, noInputs);
-    if (!inputPrompt) {
-      this.handleError_('Invalid input prompt');
-      return null;
-    }
-    const dialogState = {
-      'state': (this.state instanceof State ? this.state.getName() : this.state),
-      'data': this.data
+    const response = this.buildResponse_(inputPrompt, true, noInputs);
+    return this.doResponse_(response, RESPONSE_CODE_OK);
+  }
+
+  /**
+   * Asks Assistant to collect the user's input via list.
+   *
+   * @param {string|RichResponse|SimpleResponse} inputPrompt The input prompt text/response.
+   * @param {string} inputPrompt.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} inputPrompt.displayText If using SimpleResponse, text to be shown
+   *     to user.
+   * @param {List} list Built w/ buildList().
+   * @return {Object} HTTP response.
+   * @apiai
+   */
+  askWithList (inputPrompt, list) {
+    debug('askWithList: inputPrompt=%s, list=%s',
+      inputPrompt, JSON.stringify(list));
+    const response = this.buildResponse_(inputPrompt, true);
+    response.data.google.system_intent = {
+      intent: this.StandardIntents.OPTION,
+      spec: {
+        option_value_spec: {
+          list_select: list
+        }
+      }
+    };
+    return this.doResponse_(response, RESPONSE_CODE_OK);
+  }
+
+  /**
+   * Asks Assistant to collect the user's input via carousel.
+   *
+   * @param {string|RichResponse|SimpleResponse} inputPrompt The input prompt text/response.
+   * @param {string} inputPrompt.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} inputPrompt.displayText If using SimpleResponse, text to be shown
+   *     to user.
+   * @param {Carousel} carousel Built w/ buildCarousel().
+   * @return {Object} HTTP response.
+   * @apiai
+   */
+  askWithCarousel (inputPrompt, carousel) {
+    debug('askWithCarousel: inputPrompt=%s, carousel=%s',
+      inputPrompt, JSON.stringify(carousel));
+    const response = this.buildResponse_(inputPrompt, true);
+    response.data.google.system_intent = {
+      intent: this.StandardIntents.OPTION,
+      spec: {
+        option_value_spec: {
+          carousel_select: carousel
+        }
+      }
     };
-    const response = this.buildResponse_(dialogState, inputPrompt, true, noInputs);
     return this.doResponse_(response, RESPONSE_CODE_OK);
   }
 
@@ -413,35 +462,36 @@ const ApiAiAssistant = class extends Assistant {
    * Tells the Assistant to render the speech response and close the mic.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
+   * const action = new ApiAiAction({request: request, response: response});
    * const WELCOME_INTENT = 'input.welcome';
    * const NUMBER_INTENT = 'input.number';
    *
-   * function welcomeIntent (assistant) {
-   *   assistant.ask('Welcome to action snippets! Say a number.');
+   * function welcomeIntent (action) {
+   *   action.ask('Welcome to action snippets! Say a number.');
    * }
    *
-   * function numberIntent (assistant) {
-   *   const number = assistant.getArgument(NUMBER_ARGUMENT);
-   *   assistant.tell('You said ' + number);
+   * function numberIntent (action) {
+   *   const number = action.getArgument(NUMBER_ARGUMENT);
+   *   action.tell('You said ' + number);
    * }
    *
    * const actionMap = new Map();
    * actionMap.set(WELCOME_INTENT, welcomeIntent);
    * actionMap.set(NUMBER_INTENT, numberIntent);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
-   * @param {string} textToSpeech Final spoken response. Spoken response can be SSML.
+   * @param {string|RichResponse|SimpleResponse} textToSpeech Final spoken/shown response.
+   *     Spoken response can be SSML.
+   * @param {string} textToSpeech.speech If using SimpleResponse, speech to be spoken
+   *     to user.
+   * @param {string=} textToSpeech.displayText If using SimpleResponse, text to be shown
+   *     to user.
    * @return The response that is sent back to Assistant.
    * @apiai
    */
   tell (speechResponse) {
     debug('tell: speechResponse=%s', speechResponse);
-    if (!speechResponse) {
-      this.handleError_('Invalid speech response');
-      return null;
-    }
-    const response = this.buildResponse_(undefined, speechResponse, false);
+    const response = this.buildResponse_(speechResponse, false);
     return this.doResponse_(response, RESPONSE_CODE_OK);
   }
 
@@ -449,24 +499,24 @@ const ApiAiAssistant = class extends Assistant {
    * Set a new context for the current intent.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
+   * const action = new ApiAiAction({request: request, response: response});
    * const CONTEXT_NUMBER = 'number';
    * const NUMBER_ARGUMENT = 'myNumber';
    *
-   * function welcomeIntent (assistant) {
-   *   assistant.setContext(CONTEXT_NUMBER);
-   *   assistant.ask('Welcome to action snippets! Say a number.');
+   * function welcomeIntent (action) {
+   *   action.setContext(CONTEXT_NUMBER);
+   *   action.ask('Welcome to action snippets! Say a number.');
    * }
    *
-   * function numberIntent (assistant) {
-   *   const number = assistant.getArgument(NUMBER_ARGUMENT);
-   *   assistant.tell('You said ' + number);
+   * function numberIntent (action) {
+   *   const number = action.getArgument(NUMBER_ARGUMENT);
+   *   action.tell('You said ' + number);
    * }
    *
    * const actionMap = new Map();
    * actionMap.set(WELCOME_INTENT, welcomeIntent);
    * actionMap.set(NUMBER_INTENT, numberIntent);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
    * @param {string} name Name of the context. API.AI converts to lowercase.
    * @param {int} [lifespan=1] Context lifespan.
@@ -506,17 +556,17 @@ const ApiAiAssistant = class extends Assistant {
    * Returns the incoming contexts for this intent.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
+   * const action = new ApiAiAction({request: request, response: response});
    * const CONTEXT_NUMBER = 'number';
    * const NUMBER_ARGUMENT = 'myNumber';
    *
-   * function welcomeIntent (assistant) {
-   *   assistant.setContext(CONTEXT_NUMBER);
-   *   assistant.ask('Welcome to action snippets! Say a number.');
+   * function welcomeIntent (action) {
+   *   action.setContext(CONTEXT_NUMBER);
+   *   action.ask('Welcome to action snippets! Say a number.');
    * }
    *
-   * function numberIntent (assistant) {
-   *   let contexts = assistant.getContexts();
+   * function numberIntent (action) {
+   *   let contexts = action.getContexts();
    *   // contexts === [{
    *   //   name: 'number',
    *   //   lifespan: 0,
@@ -525,14 +575,14 @@ const ApiAiAssistant = class extends Assistant {
    *   //     myNumber.original: '23'
    *   //   }
    *   // }]
-   *   const number = assistant.getArgument(NUMBER_ARGUMENT);
-   *   assistant.tell('You said ' + number);
+   *   const number = action.getArgument(NUMBER_ARGUMENT);
+   *   action.tell('You said ' + number);
    * }
    *
    * const actionMap = new Map();
    * actionMap.set(WELCOME_INTENT, welcomeIntent);
    * actionMap.set(NUMBER_INTENT, numberIntent);
-   * assistant.handleRequest(actionMap);
+   * action.handleRequest(actionMap);
    *
    * @return {Context[]} Empty if no active contexts.
    * @apiai
@@ -606,8 +656,8 @@ const ApiAiAssistant = class extends Assistant {
    * Gets the user's raw input query.
    *
    * @example
-   * const assistant = new ApiAiAssistant({request: request, response: response});
-   * assistant.tell('You said ' + assistant.getRawInput());
+   * const action = new ApiAiAction({request: request, response: response});
+   * action.tell('You said ' + action.getRawInput());
    *
    * @return {string} User's raw query or null if no value.
    * @apiai
@@ -646,22 +696,29 @@ const ApiAiAssistant = class extends Assistant {
   /**
    * Builds a response for API.AI to send back to the Assistant.
    *
-   * @param {Object} dialogState JSON object the action uses to hold dialog state that
-   *     will be circulated back by Assistant.
-   * @param {string} textToSpeech TTS spoken to end user.
+   * @param {string|RichResponse|SimpleResponse} textToSpeech TTS/response spoken/shown
+   *     to end user.
    * @param {boolean} expectUserResponse true if the user response is expected.
    * @param {Array<string>=} noInputs Array of re-prompts when the user does not respond (max 3).
    * @return {Object} The final response returned to Assistant.
    * @private
    * @apiai
    */
-  buildResponse_ (dialogState, textToSpeech, expectUserResponse, noInputs) {
-    debug('buildResponse_: dialogState=%s, textToSpeech=%s, expectUserResponse=%s, noInputs=%s',
-        JSON.stringify(dialogState), textToSpeech, expectUserResponse, noInputs);
-    if (!textToSpeech === undefined) {
-      this.handleError_('Invalid text to speech');
+  buildResponse_ (textToSpeech, expectUserResponse, noInputs) {
+    debug('buildResponse_: textToSpeech=%s, expectUserResponse=%s, noInputs=%s',
+        JSON.stringify(textToSpeech), expectUserResponse,
+        noInputs);
+    if (!textToSpeech === undefined || !textToSpeech) {
+      this.handleError_('Invalid response');
       return null;
     }
+    if (typeof textToSpeech === 'object' && textToSpeech.speech) { // SimpleResponse
+      textToSpeech = this.buildRichResponse().addSimpleResponse(textToSpeech);
+    }
+    const dialogState = {
+      'state': (this.state instanceof State ? this.state.getName() : this.state),
+      'data': this.data
+    };
     if (noInputs) {
       if (noInputs.length > INPUTS_MAX) {
         this.handleError_('Invalid number of no inputs');
@@ -676,16 +733,24 @@ const ApiAiAssistant = class extends Assistant {
       noInputs = [];
     }
     const response = {
-      speech: textToSpeech,
-      data: {
-        google: {
-          expect_user_response: expectUserResponse,
-          is_ssml: this.isSsml_(textToSpeech),
-          no_input_prompts: noInputs
-        }
-      },
+      speech: typeof textToSpeech === 'string'
+        ? textToSpeech : textToSpeech.items[0].simple_response.text_to_speech,
       contextOut: []
     };
+    response.data = typeof textToSpeech === 'string'
+    ? {
+      google: {
+        expect_user_response: expectUserResponse,
+        is_ssml: this.isSsml_(textToSpeech),
+        no_input_prompts: noInputs
+      }
+    }
+    : { // textToSpeech is a RichResponse obj
+      google: {
+        expect_user_response: expectUserResponse,
+        rich_response: textToSpeech
+      }
+    };
     if (expectUserResponse) {
       response.contextOut.push({
         name: ACTIONS_API_AI_CONTEXT,
@@ -737,15 +802,11 @@ const ApiAiAssistant = class extends Assistant {
   fulfillPermissionsRequest_ (permissionsSpec) {
     debug('fulfillPermissionsRequest_: permissionsSpec=%s',
       JSON.stringify(permissionsSpec));
-    const dialogState = {
-      'state': (this.state instanceof State ? this.state.getName() : this.state),
-      'data': this.data
-    };
     const inputPrompt = 'PLACEHOLDER_FOR_PERMISSION';
-    const response = this.buildResponse_(dialogState, inputPrompt, true);
+    const response = this.buildResponse_(inputPrompt, true);
     response.data.google.permissions_request = permissionsSpec;
     return this.doResponse_(response, RESPONSE_CODE_OK);
   }
 };
 
-module.exports = ApiAiAssistant;
+module.exports = ApiAiAction;
diff --git a/test/actions-test.js b/test/actions-test.js
index 7757d3d..72315ca 100644
--- a/test/actions-test.js
+++ b/test/actions-test.js
@@ -26,9 +26,9 @@ const winston = require('winston');
 const chai = require('chai');
 const expect = chai.expect;
 const spies = require('chai-spies');
-const assistant = require('.././actions-on-google');
-const ApiAiAssistant = assistant.ApiAiAssistant;
-const ActionsSdkAssistant = assistant.ActionsSdkAssistant;
+const action = require('.././actions-on-google');
+const ApiAiAction = action.ApiAiAction;
+const ActionsSdkAction = action.ActionsSdkAction;
 
 chai.use(spies);
 
@@ -91,7 +91,7 @@ const MockResponse = class {
 /**
  * Describes the behavior for Assistant isSsml_ method.
  */
-describe('ApiAiAssistant#isSsml_', function () {
+describe('ApiAiAction#isSsml_', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should validate SSML syntax.', function () {
     let headers = {
@@ -142,35 +142,35 @@ describe('ApiAiAssistant#isSsml_', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({request: mockRequest, response: mockResponse});
-
-    expect(assistant.isSsml_('<speak></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<SPEAK></SPEAK>')).to.equal(true);
-    expect(assistant.isSsml_('  <speak></speak>  ')).to.equal(false);
-    expect(assistant.isSsml_('<speak>  </speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak version="1.0"></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak version="1.0">Hello world!</speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak>')).to.equal(false);
-    expect(assistant.isSsml_('</speak>')).to.equal(false);
-    expect(assistant.isSsml_('')).to.equal(false);
-    expect(assistant.isSsml_('bla bla bla')).to.equal(false);
-    expect(assistant.isSsml_('<html></html>')).to.equal(false);
-    expect(assistant.isSsml_('bla bla bla<speak></speak>')).to.equal(false);
-    expect(assistant.isSsml_('<speak></speak> bla bla bla')).to.equal(false);
-    expect(assistant.isSsml_('<speak>my SSML content</speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak>Line 1\nLine 2</speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak>Step 1, take a deep breath. <break time="2s" />Step 2, exhale.</speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><say-as interpret-as="cardinal">12345</say-as></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><say-as interpret-as="ordinal">1</say-as></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><say-as interpret-as="characters">can</say-as></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><say-as interpret-as="date" format="ymd">1960-09-10</say-as></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><say-as interpret-as="date" format="yyyymmdd" detail="1">1960-09-10</say-as></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><say-as interpret-as="date" format="dm">10-9</say-as></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><say-as interpret-as="date" format="dmy" detail="2">10-9-1960</say-as></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><say-as interpret-as="time" format="hms12">2:30pm</say-as></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><audio src="https://somesite.bla/meow.mp3">a cat meowing</audio></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><p><s>This is sentence one.</s><s>This is sentence two.</s></p></speak>')).to.equal(true);
-    expect(assistant.isSsml_('<speak><sub alias="World Wide Web Consortium">W3C</sub></speak>')).to.equal(true);
+    const action = new ApiAiAction({request: mockRequest, response: mockResponse});
+
+    expect(action.isSsml_('<speak></speak>')).to.equal(true);
+    expect(action.isSsml_('<SPEAK></SPEAK>')).to.equal(true);
+    expect(action.isSsml_('  <speak></speak>  ')).to.equal(false);
+    expect(action.isSsml_('<speak>  </speak>')).to.equal(true);
+    expect(action.isSsml_('<speak version="1.0"></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak version="1.0">Hello world!</speak>')).to.equal(true);
+    expect(action.isSsml_('<speak>')).to.equal(false);
+    expect(action.isSsml_('</speak>')).to.equal(false);
+    expect(action.isSsml_('')).to.equal(false);
+    expect(action.isSsml_('bla bla bla')).to.equal(false);
+    expect(action.isSsml_('<html></html>')).to.equal(false);
+    expect(action.isSsml_('bla bla bla<speak></speak>')).to.equal(false);
+    expect(action.isSsml_('<speak></speak> bla bla bla')).to.equal(false);
+    expect(action.isSsml_('<speak>my SSML content</speak>')).to.equal(true);
+    expect(action.isSsml_('<speak>Line 1\nLine 2</speak>')).to.equal(true);
+    expect(action.isSsml_('<speak>Step 1, take a deep breath. <break time="2s" />Step 2, exhale.</speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><say-as interpret-as="cardinal">12345</say-as></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><say-as interpret-as="ordinal">1</say-as></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><say-as interpret-as="characters">can</say-as></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><say-as interpret-as="date" format="ymd">1960-09-10</say-as></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><say-as interpret-as="date" format="yyyymmdd" detail="1">1960-09-10</say-as></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><say-as interpret-as="date" format="dm">10-9</say-as></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><say-as interpret-as="date" format="dmy" detail="2">10-9-1960</say-as></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><say-as interpret-as="time" format="hms12">2:30pm</say-as></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><audio src="https://somesite.bla/meow.mp3">a cat meowing</audio></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><p><s>This is sentence one.</s><s>This is sentence two.</s></p></speak>')).to.equal(true);
+    expect(action.isSsml_('<speak><sub alias="World Wide Web Consortium">W3C</sub></speak>')).to.equal(true);
   });
 });
 
@@ -179,14 +179,14 @@ describe('ApiAiAssistant#isSsml_', function () {
 // ---------------------------------------------------------------------------
 
 /**
- * Describes the behavior for ApiAiAssistant constructor method.
+ * Describes the behavior for ApiAiAction constructor method.
  */
-describe('ApiAiAssistant#constructor', function () {
+describe('ApiAiAction#constructor', function () {
   // Calls sessionStarted when provided
   it('Calls sessionStarted when new session', function () {
     let headers = {
       'Content-Type': 'application/json',
-      'google-assistant-api-version': 'v1'
+      'google-action-api-version': 'v1'
     };
     let body = {
       'id': 'ce7295cc-b042-42d8-8d72-14b83597ac1e',
@@ -234,13 +234,13 @@ describe('ApiAiAssistant#constructor', function () {
 
     const sessionStartedSpy = chai.spy();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse,
       sessionStarted: sessionStartedSpy
     });
 
-    assistant.handleRequest();
+    action.handleRequest();
 
     expect(sessionStartedSpy).to.have.been.called();
   });
@@ -297,22 +297,22 @@ describe('ApiAiAssistant#constructor', function () {
 
     const sessionStartedSpy = chai.spy();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse,
       sessionStarted: sessionStartedSpy
     });
 
-    assistant.handleRequest();
+    action.handleRequest();
 
     expect(sessionStartedSpy).to.not.have.been.called();
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant tell method.
+ * Describes the behavior for ApiAiAction tell method.
  */
-describe('ApiAiAssistant#tell', function () {
+describe('ApiAiAction#tell', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -363,18 +363,18 @@ describe('ApiAiAssistant#tell', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({request: mockRequest, response: mockResponse});
+    const action = new ApiAiAction({request: mockRequest, response: mockResponse});
 
-    function handler (assistant) {
+    function handler (action) {
       return new Promise(function (resolve, reject) {
-        resolve(assistant.tell('hello'));
+        resolve(action.tell('hello'));
       });
     }
 
     let actionMap = new Map();
     actionMap.set('generate_answer', handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -397,9 +397,9 @@ describe('ApiAiAssistant#tell', function () {
 });
 
 /**
- * Describes the behavior for ApiAiAssistant ask method.
+ * Describes the behavior for ApiAiAction ask method.
  */
-describe('ApiAiAssistant#ask', function () {
+describe('ApiAiAction#ask', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -428,7 +428,7 @@ describe('ApiAiAssistant#ask', function () {
             'lifespan': 5
           },
           {
-            'name': '_assistant_',
+            'name': '_action_',
             'parameters': {
               'answer': 68,
               'guess.original': '50',
@@ -463,21 +463,21 @@ describe('ApiAiAssistant#ask', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function handler (assistant) {
+    function handler (action) {
       return new Promise(function (resolve, reject) {
-        resolve(assistant.ask('hello'));
+        resolve(action.ask('hello'));
       });
     }
 
     let actionMap = new Map();
     actionMap.set('check_guess', handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -502,9 +502,9 @@ describe('ApiAiAssistant#ask', function () {
 });
 
 /**
- * Describes the behavior for ApiAiAssistant askForPermissions method.
+ * Describes the behavior for ApiAiAction askForPermissions method.
  */
-describe('ApiAiAssistant#askForPermissions', function () {
+describe('ApiAiAction#askForPermissions', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {'Content-Type': 'application/json', 'google-assistant-api-version': 'v1'};
@@ -545,18 +545,18 @@ describe('ApiAiAssistant#askForPermissions', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({request: mockRequest, response: mockResponse});
+    const action = new ApiAiAction({request: mockRequest, response: mockResponse});
 
-    function handler (assistant) {
+    function handler (action) {
       return new Promise(function (resolve, reject) {
-        resolve(assistant.askForPermissions('To test', ['NAME', 'DEVICE_PRECISE_LOCATION']));
+        resolve(action.askForPermissions('To test', ['NAME', 'DEVICE_PRECISE_LOCATION']));
       });
     }
 
     let actionMap = new Map();
     actionMap.set('get_permission', handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -585,11 +585,11 @@ describe('ApiAiAssistant#askForPermissions', function () {
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getUser method.
+ * Describes the behavior for ApiAiAction getUser method.
  */
-describe('ApiAiAssistant#getUser', function () {
+describe('ApiAiAction#getUser', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant request user.', function () {
+  it('Should validate action request user.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'google-assistant-api-version': 'v1'
@@ -639,23 +639,94 @@ describe('ApiAiAssistant#getUser', function () {
     let mockRequest = new MockRequest(headers, body);
     let mockResponse = new MockResponse();
 
-    let assistant = new ApiAiAssistant({
+    let action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
     // Test new and old API
-    expect(assistant.getUser().user_id).to.equal('11112226094657824893');
-    expect(assistant.getUser().userId).to.equal('11112226094657824893');
+    expect(action.getUser().user_id).to.equal('11112226094657824893');
+    expect(action.getUser().userId).to.equal('11112226094657824893');
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getUserName method.
+ * Describes the behavior for ApiAiAction getInputType method.
  */
-describe('ApiAiAssistant#getUserName', function () {
+describe('ApiAiAction#getInputType', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant request user.', function () {
+  it('Should validate action request input type.', function () {
+    let headers = {
+      'Content-Type': 'application/json',
+      'google-assistant-api-version': 'v1'
+    };
+    let body = {
+      'id': 'ce7295cc-b042-42d8-8d72-14b83597ac1e',
+      'timestamp': '2016-10-28T03:05:34.288Z',
+      'result': {
+        'source': 'agent',
+        'resolvedQuery': 'start guess a number game',
+        'speech': '',
+        'action': 'generate_answer',
+        'actionIncomplete': false,
+        'parameters': {
+
+        },
+        'contexts': [
+
+        ],
+        'metadata': {
+          'intentId': '56da4637-0419-46b2-b851-d7bf726b1b1b',
+          'webhookUsed': 'true',
+          'intentName': 'start_game'
+        },
+        'fulfillment': {
+          'speech': ''
+        },
+        'score': 1
+      },
+      'status': {
+        'code': 200,
+        'errorType': 'success'
+      },
+      'sessionId': 'e420f007-501d-4bc8-b551-5d97772bc50c',
+      'originalRequest': {
+        'data': {
+          'conversation': {
+            'type': 2
+          },
+          'inputs': [
+            {
+              'raw_inputs': [
+                {
+                  'input_type': 1
+                }
+              ]
+            }
+          ]
+        }
+      }
+    };
+
+    const mockRequest = new MockRequest(headers, body);
+    const mockResponse = new MockResponse();
+
+    const action = new ApiAiAction({
+      request: mockRequest,
+      response: mockResponse
+    });
+
+    // Test new and old API
+    expect(action.getInputType()).to.equal(action.InputTypes.TOUCH);
+  });
+});
+
+/**
+ * Describes the behavior for ApiAiAction getUserName method.
+ */
+describe('ApiAiAction#getUserName', function () {
+  // Success case test, when the API returns a valid 200 response with the response object
+  it('Should validate action request user.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'google-assistant-api-version': 'v1'
@@ -709,14 +780,14 @@ describe('ApiAiAssistant#getUserName', function () {
     let mockRequest = new MockRequest(headers, body);
     let mockResponse = new MockResponse();
 
-    let assistant = new ApiAiAssistant({
+    let action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getUserName().displayName).to.equal('John Smith');
-    expect(assistant.getUserName().givenName).to.equal('John');
-    expect(assistant.getUserName().familyName).to.equal('Smith');
+    expect(action.getUserName().displayName).to.equal('John Smith');
+    expect(action.getUserName().givenName).to.equal('John');
+    expect(action.getUserName().familyName).to.equal('Smith');
 
     // Test the false case
 
@@ -725,21 +796,21 @@ describe('ApiAiAssistant#getUserName', function () {
     mockRequest = new MockRequest(headers, body);
     mockResponse = new MockResponse();
 
-    assistant = new ApiAiAssistant({
+    action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getUserName()).to.equal(null);
+    expect(action.getUserName()).to.equal(null);
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getDeviceLocation method.
+ * Describes the behavior for ApiAiAction getDeviceLocation method.
  */
-describe('ApiAiAssistant#getDeviceLocation', function () {
+describe('ApiAiAction#getDeviceLocation', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant request user.', function () {
+  it('Should validate action request user.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'google-assistant-api-version': 'v1'
@@ -800,19 +871,19 @@ describe('ApiAiAssistant#getDeviceLocation', function () {
     let mockRequest = new MockRequest(headers, body);
     let mockResponse = new MockResponse();
 
-    let assistant = new ApiAiAssistant({
+    let action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getDeviceLocation().coordinates).to.deep.equal({
+    expect(action.getDeviceLocation().coordinates).to.deep.equal({
       latitude: 37.3861,
       longitude: 122.0839
     });
-    expect(assistant.getDeviceLocation().address)
+    expect(action.getDeviceLocation().address)
       .to.equal('123 Main St, Anytown, CA 12345, United States');
-    expect(assistant.getDeviceLocation().zipCode).to.equal('12345');
-    expect(assistant.getDeviceLocation().city).to.equal('Anytown');
+    expect(action.getDeviceLocation().zipCode).to.equal('12345');
+    expect(action.getDeviceLocation().city).to.equal('Anytown');
 
     // Test the false case
 
@@ -821,24 +892,24 @@ describe('ApiAiAssistant#getDeviceLocation', function () {
     mockRequest = new MockRequest(headers, body);
     mockResponse = new MockResponse();
 
-    assistant = new ApiAiAssistant({
+    action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getDeviceLocation()).to.equal(null);
+    expect(action.getDeviceLocation()).to.equal(null);
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant isPermissionGranted method.
+ * Describes the behavior for ApiAiAction isPermissionGranted method.
  */
-describe('ApiAiAssistant#isPermissionGranted', function () {
+describe('ApiAiAction#isPermissionGranted', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant request user.', function () {
+  it('Should validate action request user.', function () {
     let headers = {
       'Content-Type': 'application/json',
-      'google-assistant-api-version': 'v1'
+      'google-action-api-version': 'v1'
     };
     let body = {
       'id': 'ce7295cc-b042-42d8-8d72-14b83597ac1e',
@@ -888,12 +959,12 @@ describe('ApiAiAssistant#isPermissionGranted', function () {
     let mockRequest = new MockRequest(headers, body);
     let mockResponse = new MockResponse();
 
-    let assistant = new ApiAiAssistant({
+    let action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.isPermissionGranted()).to.equal(true);
+    expect(action.isPermissionGranted()).to.equal(true);
 
     // Test the false case
 
@@ -902,19 +973,19 @@ describe('ApiAiAssistant#isPermissionGranted', function () {
     mockRequest = new MockRequest(headers, body);
     mockResponse = new MockResponse();
 
-    assistant = new ApiAiAssistant({
+    action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.isPermissionGranted()).to.equal(false);
+    expect(action.isPermissionGranted()).to.equal(false);
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getIntent method.
+ * Describes the behavior for ApiAiAction getIntent method.
  */
-describe('ApiAiAssistant#getIntent', function () {
+describe('ApiAiAction#getIntent', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should get the intent value for the success case.', function () {
     let headers = {
@@ -943,7 +1014,7 @@ describe('ApiAiAssistant#getIntent', function () {
             'lifespan': 5
           },
           {
-            'name': '_assistant_',
+            'name': '_action_',
             'parameters': {
               'answer': 68,
               'guess.original': '50',
@@ -978,19 +1049,19 @@ describe('ApiAiAssistant#getIntent', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getIntent()).to.equal('check_guess');
+    expect(action.getIntent()).to.equal('check_guess');
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getArgument method.
+ * Describes the behavior for ApiAiAction getArgument method.
  */
-describe('ApiAiAssistant#getArgument', function () {
+describe('ApiAiAction#getArgument', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should get the argument value for the success case.', function () {
     let headers = {
@@ -1019,7 +1090,7 @@ describe('ApiAiAssistant#getArgument', function () {
             'lifespan': 5
           },
           {
-            'name': '_assistant_',
+            'name': '_action_',
             'parameters': {
               'answer': 68,
               'guess.original': '50',
@@ -1045,24 +1116,6 @@ describe('ApiAiAssistant#getArgument', function () {
       'sessionId': 'e420f007-501d-4bc8-b551-5d97772bc50c',
       'originalRequest': {
         'data': {
-          'inputs': [
-            {
-              'arguments': [
-                {
-                  'raw_text': 'raw text one',
-                  'text_value': 'text value one',
-                  'name': 'arg_value_one'
-                },
-                {
-                  'name': 'other_value',
-                  'raw_text': '45',
-                  'other_value': {
-                    'key': 'value'
-                  }
-                }
-              ]
-            }
-          ],
           'conversation': {
             'type': 2
           }
@@ -1072,71 +1125,127 @@ describe('ApiAiAssistant#getArgument', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getArgument('guess')).to.equal('50');
-    expect(assistant.getArgument('arg_value_one')).to.equal('text value one');
-    expect(assistant.getArgument('other_value', true)).to.deep.equal({
-      'name': 'other_value',
-      'raw_text': '45',
-      'other_value': {
-        'key': 'value'
-      }
-    });
+    expect(action.getArgument('guess')).to.equal('50');
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getContextArgument method.
+ * Describes the behavior for ApiAiAction getArgument method.
  */
-describe('ApiAiAssistant#getContextArgument', function () {
+describe('ApiAiAction#getArgument', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should get the context argument value for the success case.', function () {
+  it('Should get the argument value for the success case.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1'
     };
     let body = {
-      'id': '9c4394e3-4f5a-4e68-b1af-088b75ad3071',
-      'timestamp': '2016-10-28T03:41:39.957Z',
+      'originalRequest': {
+        'source': 'google',
+        'data': {
+          'surface': {
+            'capabilities': [
+              {
+                'name': 'actions.capability.AUDIO_OUTPUT'
+              },
+              {
+                'name': 'actions.capability.SCREEN_OUTPUT'
+              }
+            ]
+          },
+          'inputs': [
+            {
+              'arguments': [
+                {
+                  'raw_text': 'history',
+                  'text_value': 'history',
+                  'name': 'text'
+                },
+                {
+                  'raw_text': 'other',
+                  'text_value': 'other',
+                  'name': 'other'
+                }
+              ],
+              'intent': 'assistant.intent.action.TEXT',
+              'raw_inputs': [
+                {
+                  'query': 'history',
+                  'input_type': 2,
+                  'annotation_sets': [
+
+                  ]
+                }
+              ]
+            }
+          ],
+          'user': {
+            'user_id': '2c0671YW7AaZ0UU6DmwOgL42lwpxmyxznlt6X4b/DEc='
+          },
+          'conversation': {
+            'conversation_token': '[]',
+            'conversation_id': '1487871410253',
+            'type': 2
+          }
+        }
+      },
+      'id': '30045c43-1d1b-44f7-a599-0781dd24dd07',
+      'timestamp': '2017-02-23T17:36:56.087Z',
+      'lang': 'en',
       'result': {
         'source': 'agent',
-        'resolvedQuery': '50',
+        'resolvedQuery': 'history',
         'speech': '',
-        'action': 'check_guess',
+        'action': 'say_google_fact',
         'actionIncomplete': false,
         'parameters': {
-          'guess': '50'
+          'category': 'history'
         },
         'contexts': [
           {
-            'name': 'game',
+            'name': 'actions_capability_screen_output',
             'parameters': {
-              'guess.original': '50',
-              'guess': '50'
+              'category.original': 'history',
+              'category': 'history'
             },
-            'lifespan': 5
+            'lifespan': 0
           },
           {
-            'name': 'previous_answer',
+            'name': 'actions_capability_audio_output',
             'parameters': {
-              'answer': '68',
-              'guess.original': '50',
-              'guess': '50'
+              'category.original': 'history',
+              'category': 'history'
             },
-            'lifespan': 99
+            'lifespan': 0
+          },
+          {
+            'name': 'google-facts',
+            'parameters': {
+              'category.original': 'history',
+              'category': 'history'
+            },
+            'lifespan': 5
           }
         ],
         'metadata': {
-          'intentId': '1e46ffc2-651f-4ac0-a54e-9698feb88880',
+          'intentId': '4a35cf33-e446-4b2b-a284-c70bc4dfce17',
           'webhookUsed': 'true',
-          'intentName': 'provide_guess'
+          'webhookForSlotFillingUsed': 'false',
+          'intentName': 'choose_google'
         },
         'fulfillment': {
-          'speech': ''
+          'speech': '',
+          'messages': [
+            {
+              'type': 0,
+              'speech': ''
+            }
+          ]
         },
         'score': 1
       },
@@ -1144,34 +1253,24 @@ describe('ApiAiAssistant#getContextArgument', function () {
         'code': 200,
         'errorType': 'success'
       },
-      'sessionId': 'e420f007-501d-4bc8-b551-5d97772bc50c',
-      'originalRequest': {
-        'data': {
-          'conversation': {
-            'type': 2
-          }
-        }
-      }
+      'sessionId': '1487871410253'
     };
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getContextArgument('game', 'guess')).to
-      .deep.equal({ value: '50', original: '50' });
-    expect(assistant.getContextArgument('previous_answer', 'answer')).to
-      .deep.equal({ value: '68' });
+    expect(action.getArgument('other')).to.equal('other');
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant isRequestFromApiAi method.
+ * Describes the behavior for ApiAiAction isRequestFromApiAi method.
  */
-describe('ApiAiAssistant#isRequestFromApiAi', function () {
+describe('ApiAiAction#isRequestFromApiAi', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should confirm request is from API.ai.', function () {
     let headers = {
@@ -1234,7 +1333,7 @@ describe('ApiAiAssistant#isRequestFromApiAi', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
@@ -1242,14 +1341,14 @@ describe('ApiAiAssistant#isRequestFromApiAi', function () {
     const HEADER_KEY = 'Google-Assistant-Signature';
     const HEADER_VALUE = 'YOUR_PRIVATE_KEY';
 
-    expect(assistant.isRequestFromApiAi(HEADER_KEY, HEADER_VALUE)).to.equal(true);
+    expect(action.isRequestFromApiAi(HEADER_KEY, HEADER_VALUE)).to.equal(true);
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant isRequestFromApiAi method.
+ * Describes the behavior for ApiAiAction isRequestFromApiAi method.
  */
-describe('ApiAiAssistant#isRequestFromApiAi', function () {
+describe('ApiAiAction#isRequestFromApiAi', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should confirm request is NOT from API.ai.', function () {
     let headers = {
@@ -1291,7 +1390,7 @@ describe('ApiAiAssistant#isRequestFromApiAi', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
@@ -1299,14 +1398,14 @@ describe('ApiAiAssistant#isRequestFromApiAi', function () {
     const HEADER_KEY = 'Google-Assistant-Signature';
     const HEADER_VALUE = 'YOUR_PRIVATE_KEY';
 
-    expect(assistant.isRequestFromApiAi(HEADER_KEY, HEADER_VALUE)).to.equal(false);
+    expect(action.isRequestFromApiAi(HEADER_KEY, HEADER_VALUE)).to.equal(false);
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getRawInput method.
+ * Describes the behavior for ApiAiAction getRawInput method.
  */
-describe('ApiAiAssistant#getRawInput', function () {
+describe('ApiAiAction#getRawInput', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should raw input from API.ai.', function () {
     let headers = {
@@ -1377,19 +1476,19 @@ describe('ApiAiAssistant#getRawInput', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getRawInput()).to.equal('is it 667');
+    expect(action.getRawInput()).to.equal('is it 667');
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant setContext method.
+ * Describes the behavior for ApiAiAction setContext method.
  */
-describe('ApiAiAssistant#setContext', function () {
+describe('ApiAiAction#setContext', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -1447,22 +1546,22 @@ describe('ApiAiAssistant#setContext', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
     const CONTEXT_NUMBER = 'number';
 
-    function handler (assistant) {
-      assistant.setContext(CONTEXT_NUMBER);
-      assistant.ask('Welcome to action snippets! Say a number.');
+    function handler (action) {
+      action.setContext(CONTEXT_NUMBER);
+      action.ask('Welcome to action snippets! Say a number.');
     }
 
     let actionMap = new Map();
     actionMap.set('input.welcome', handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -1495,9 +1594,9 @@ describe('ApiAiAssistant#setContext', function () {
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getContexts method.
+ * Describes the behavior for ApiAiAction getContexts method.
  */
-describe('ApiAiAssistant#getContexts', function () {
+describe('ApiAiAction#getContexts', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the active contexts from incoming JSON for the success case.', function () {
     let headers = {
@@ -1570,12 +1669,12 @@ describe('ApiAiAssistant#getContexts', function () {
     let mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    let assistant = new ApiAiAssistant({
+    let action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    let mockContexts = assistant.getContexts();
+    let mockContexts = action.getContexts();
 
     let expectedContexts = [
       {
@@ -1597,15 +1696,15 @@ describe('ApiAiAssistant#getContexts', function () {
     ];
     expect(mockContexts).to.deep.equal(expectedContexts);
 
-    // Check the case with only assistant.data incoming
+    // Check the case with only action.data incoming
     body.result.contexts = [ { 'name': '_actions_on_google_' } ];
     mockRequest = new MockRequest(headers, body);
 
-    assistant = new ApiAiAssistant({
+    action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
-    mockContexts = assistant.getContexts();
+    mockContexts = action.getContexts();
     expectedContexts = [];
     expect(mockContexts).to.deep.equal(expectedContexts);
 
@@ -1613,20 +1712,20 @@ describe('ApiAiAssistant#getContexts', function () {
     body.result.contexts = [];
     mockRequest = new MockRequest(headers, body);
 
-    assistant = new ApiAiAssistant({
+    action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
-    mockContexts = assistant.getContexts();
+    mockContexts = action.getContexts();
     expectedContexts = [];
     expect(mockContexts).to.deep.equal(expectedContexts);
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant getContext method.
+ * Describes the behavior for ApiAiAction getContext method.
  */
-describe('ApiAiAssistant#getContext', function () {
+describe('ApiAiAction#getContext', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the context by name from incoming JSON for the success case.', function () {
     let headers = {
@@ -1699,12 +1798,12 @@ describe('ApiAiAssistant#getContext', function () {
     let mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    let assistant = new ApiAiAssistant({
+    let action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    let mockContext = assistant.getContext('number');
+    let mockContext = action.getContext('number');
 
     let expectedContext = {
       'name': 'number',
@@ -1720,20 +1819,20 @@ describe('ApiAiAssistant#getContext', function () {
     body.result.contexts = [];
     mockRequest = new MockRequest(headers, body);
 
-    assistant = new ApiAiAssistant({
+    action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
-    mockContext = assistant.getContext('name');
+    mockContext = action.getContext('name');
     expectedContext = null;
     expect(mockContext).to.equal(expectedContext);
   });
 });
 
 /**
- * Describes the behavior for ApiAiAssistant ask with no inputs method.
+ * Describes the behavior for ApiAiAction ask with no inputs method.
  */
-describe('ApiAiAssistant#ask', function () {
+describe('ApiAiAction#ask', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -1801,20 +1900,20 @@ describe('ApiAiAssistant#ask', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ApiAiAssistant({
+    const action = new ApiAiAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function handler (assistant) {
-      assistant.ask('Welcome to action snippets! Say a number.',
+    function handler (action) {
+      action.ask('Welcome to action snippets! Say a number.',
         ['Say any number', 'Pick a number', 'What is the number?']);
     }
 
     let actionMap = new Map();
     actionMap.set('input.welcome', handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -1855,9 +1954,9 @@ describe('ApiAiAssistant#ask', function () {
 // ---------------------------------------------------------------------------
 
 /**
- * Describes the behavior for ApiAiAssistant constructor method.
+ * Describes the behavior for ApiAiAction constructor method.
  */
-describe('ActionsSdkAssistant#constructor', function () {
+describe('ActionsSdkAction#constructor', function () {
   // Calls sessionStarted when provided
   it('Calls sessionStarted when new session', function () {
     let headers = {
@@ -1894,13 +1993,13 @@ describe('ActionsSdkAssistant#constructor', function () {
 
     const sessionStartedSpy = chai.spy();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse,
       sessionStarted: sessionStartedSpy
     });
 
-    assistant.handleRequest();
+    action.handleRequest();
 
     expect(sessionStartedSpy).to.have.been.called();
   });
@@ -1941,22 +2040,22 @@ describe('ActionsSdkAssistant#constructor', function () {
 
     const sessionStartedSpy = chai.spy();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse,
       sessionStarted: sessionStartedSpy
     });
 
-    assistant.handleRequest();
+    action.handleRequest();
 
     expect(sessionStartedSpy).to.not.have.been.called();
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant ask method.
+ * Describes the behavior for ActionsSdkAction ask method.
  */
-describe('ActionsSdkAssistant#ask', function () {
+describe('ActionsSdkAction#ask', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -1991,23 +2090,23 @@ describe('ActionsSdkAssistant#ask', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function handler (assistant) {
-      let inputPrompt = assistant.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
+    function handler (action) {
+      let inputPrompt = action.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
           'I can read out an ordinal like ' +
           '<say-as interpret-as="ordinal">123</say-as>. Say a number.</speak>',
           ['I didn\'t hear a number', 'If you\'re still there, what\'s the number?', 'What is the number?']);
-      assistant.ask(inputPrompt);
+      action.ask(inputPrompt);
     }
 
     let actionMap = new Map();
-    actionMap.set(assistant.StandardIntents.MAIN, handler);
+    actionMap.set(action.StandardIntents.MAIN, handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -2046,9 +2145,9 @@ describe('ActionsSdkAssistant#ask', function () {
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant ask method with function handler.
+ * Describes the behavior for ActionsSdkAction ask method with function handler.
  */
-describe('ActionsSdkAssistant#ask', function () {
+describe('ActionsSdkAction#ask', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -2083,23 +2182,23 @@ describe('ActionsSdkAssistant#ask', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function handler (assistant) {
-      let inputPrompt = assistant.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
+    function handler (action) {
+      let inputPrompt = action.buildInputPrompt(true, '<speak>Hi! <break time="1"/> ' +
           'I can read out an ordinal like ' +
           '<say-as interpret-as="ordinal">123</say-as>. Say a number.</speak>',
           ['I didn\'t hear a number', 'If you\'re still there, what\'s the number?', 'What is the number?']);
-      assistant.ask(inputPrompt);
+      action.ask(inputPrompt);
     }
 
     let actionMap = new Map();
-    actionMap.set(assistant.StandardIntents.MAIN, handler);
+    actionMap.set(action.StandardIntents.MAIN, handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -2138,9 +2237,9 @@ describe('ActionsSdkAssistant#ask', function () {
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant tell method.
+ * Describes the behavior for ActionsSdkAction tell method.
  */
-describe('ActionsSdkAssistant#tell', function () {
+describe('ActionsSdkAction#tell', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -2178,21 +2277,21 @@ describe('ActionsSdkAssistant#tell', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function handler (assistant) {
+    function handler (action) {
       return new Promise(function (resolve, reject) {
-        resolve(assistant.tell('Goodbye!'));
+        resolve(action.tell('Goodbye!'));
       });
     }
 
     let actionMap = new Map();
-    actionMap.set(assistant.StandardIntents.MAIN, handler);
+    actionMap.set(action.StandardIntents.MAIN, handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -2208,9 +2307,9 @@ describe('ActionsSdkAssistant#tell', function () {
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getRawInput method.
+ * Describes the behavior for ActionsSdkAction getRawInput method.
  */
-describe('ActionsSdkAssistant#getRawInput', function () {
+describe('ActionsSdkAction#getRawInput', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should get the raw user input for the success case.', function () {
     let headers = {
@@ -2248,19 +2347,19 @@ describe('ActionsSdkAssistant#getRawInput', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getRawInput()).to.equal('bye');
+    expect(action.getRawInput()).to.equal('bye');
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant askForText method.
+ * Describes the behavior for ActionsSdkAction askForText method.
  */
-describe('ActionsSdkAssistant#askForText', function () {
+describe('ActionsSdkAction#askForText', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -2295,21 +2394,21 @@ describe('ActionsSdkAssistant#askForText', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function handler (assistant) {
+    function handler (action) {
       return new Promise(function (resolve, reject) {
-        resolve(assistant.ask('What can I help you with?'));
+        resolve(action.ask('What can I help you with?'));
       });
     }
 
     let actionMap = new Map();
-    actionMap.set(assistant.StandardIntents.MAIN, handler);
+    actionMap.set(action.StandardIntents.MAIN, handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -2340,9 +2439,9 @@ describe('ActionsSdkAssistant#askForText', function () {
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant askForText method with SSML.
+ * Describes the behavior for ActionsSdkAction askForText method with SSML.
  */
-describe('ActionsSdkAssistant#askForText', function () {
+describe('ActionsSdkAction#askForText', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -2377,21 +2476,21 @@ describe('ActionsSdkAssistant#askForText', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function handler (assistant) {
+    function handler (action) {
       return new Promise(function (resolve, reject) {
-        resolve(assistant.ask('<speak>What <break time="1"/> can I help you with?</speak>'));
+        resolve(action.ask('<speak>What <break time="1"/> can I help you with?</speak>'));
       });
     }
 
     let actionMap = new Map();
-    actionMap.set(assistant.StandardIntents.MAIN, handler);
+    actionMap.set(action.StandardIntents.MAIN, handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -2422,9 +2521,9 @@ describe('ActionsSdkAssistant#askForText', function () {
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant ask (advanced usage) method.
+ * Describes the behavior for ActionsSdkAction ask (advanced usage) method.
  */
-describe('ActionsSdkAssistant#ask', function () {
+describe('ActionsSdkAction#ask', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -2457,23 +2556,23 @@ describe('ActionsSdkAssistant#ask', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function handler (assistant) {
+    function handler (action) {
       return new Promise(function (resolve, reject) {
-        let inputPrompt = assistant.buildInputPrompt(false, 'Welcome to action snippets! Say a number.',
+        let inputPrompt = action.buildInputPrompt(false, 'Welcome to action snippets! Say a number.',
           ['Say any number', 'Pick a number', 'What is the number?']);
-        resolve(assistant.ask(inputPrompt));
+        resolve(action.ask(inputPrompt));
       });
     }
 
     let actionMap = new Map();
-    actionMap.set(assistant.StandardIntents.MAIN, handler);
+    actionMap.set(action.StandardIntents.MAIN, handler);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -2512,9 +2611,9 @@ describe('ActionsSdkAssistant#ask', function () {
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant askForPermissions method.
+ * Describes the behavior for ActionsSdkAction askForPermissions method.
  */
-describe('ActionsSdkAssistant#askForPermissions', function () {
+describe('ActionsSdkAction#askForPermissions', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should return the valid JSON in the response object for the success case.', function () {
     let headers = {
@@ -2547,17 +2646,17 @@ describe('ActionsSdkAssistant#askForPermissions', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
     const GET_RIDE = 'GET_RIDE';
 
-    function getRide (assistant) {
-      assistant.askForPermissions('To get you a ride', [
-        assistant.SupportedPermissions.NAME,
-        assistant.SupportedPermissions.DEVICE_PRECISE_LOCATION
+    function getRide (action) {
+      action.askForPermissions('To get you a ride', [
+        action.SupportedPermissions.NAME,
+        action.SupportedPermissions.DEVICE_PRECISE_LOCATION
       ], {
         carType: 'big'
       });
@@ -2566,7 +2665,7 @@ describe('ActionsSdkAssistant#askForPermissions', function () {
     let actionMap = new Map();
     actionMap.set(GET_RIDE, getRide);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -2603,11 +2702,11 @@ describe('ActionsSdkAssistant#askForPermissions', function () {
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getUser method.
+ * Describes the behavior for ActionsSdkAction getUser method.
  */
-describe('ActionsSdkAssistant#getUser', function () {
+describe('ActionsSdkAction#getUser', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant request info.', function () {
+  it('Should validate action request info.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1'
@@ -2640,21 +2739,70 @@ describe('ActionsSdkAssistant#getUser', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
     // Test new and old API
-    expect(assistant.getUser().user_id).to.equal('11112226094657824893');
-    expect(assistant.getUser().userId).to.equal('11112226094657824893');
+    expect(action.getUser().user_id).to.equal('11112226094657824893');
+    expect(action.getUser().userId).to.equal('11112226094657824893');
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getUserName method.
+ * Describes the behavior for ActionsSdkAction getInputType method.
  */
-describe('ActionsSdkAssistant#getUserName', function () {
+describe('ActionsSdkAction#getInputType', function () {
+  // Success case test, when the API returns a valid 200 response with the response object
+  it('Should validate action request input type.', function () {
+    let headers = {
+      'Content-Type': 'application/json',
+      'google-assistant-api-version': 'v1'
+    };
+    let body = {
+      'user': {
+        'user_id': '11112226094657824893'
+      },
+      'conversation': {
+        'conversation_id': '1480476553943',
+        'type': 1
+      },
+      'inputs': [
+        {
+          'intent': 'assistant.intent.action.MAIN',
+          'raw_inputs': [
+            {
+              'input_type': 1,
+              'query': 'talk to action snippets'
+            }
+          ],
+          'arguments': [
+            {
+              'name': 'agent_info'
+            }
+          ]
+        }
+      ]
+    };
+
+    const mockRequest = new MockRequest(headers, body);
+    const mockResponse = new MockResponse();
+
+    const action = new ActionsSdkAction({
+      request: mockRequest,
+      response: mockResponse
+    });
+
+    // Test new and old API
+    expect(action.getInputType()).to.equal(action.InputTypes.TOUCH);
+  });
+});
+
+/**
+ * Describes the behavior for ActionsSdkAction getUserName method.
+ */
+describe('ActionsSdkAction#getUserName', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should validate assistant request user.', function () {
     let headers = {
@@ -2695,14 +2843,14 @@ describe('ActionsSdkAssistant#getUserName', function () {
     let mockRequest = new MockRequest(headers, body);
     let mockResponse = new MockResponse();
 
-    let assistant = new ActionsSdkAssistant({
+    let action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getUserName().displayName).to.equal('John Smith');
-    expect(assistant.getUserName().givenName).to.equal('John');
-    expect(assistant.getUserName().familyName).to.equal('Smith');
+    expect(action.getUserName().displayName).to.equal('John Smith');
+    expect(action.getUserName().givenName).to.equal('John');
+    expect(action.getUserName().familyName).to.equal('Smith');
 
     // Test the false case
 
@@ -2711,21 +2859,21 @@ describe('ActionsSdkAssistant#getUserName', function () {
     mockRequest = new MockRequest(headers, body);
     mockResponse = new MockResponse();
 
-    assistant = new ActionsSdkAssistant({
+    action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getUserName()).to.equal(null);
+    expect(action.getUserName()).to.equal(null);
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getDeviceLocation method.
+ * Describes the behavior for ActionsSdkAction getDeviceLocation method.
  */
-describe('ActionsSdkAssistant#getDeviceLocation', function () {
+describe('ActionsSdkAction#getDeviceLocation', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant request user.', function () {
+  it('Should validate action request user.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1'
@@ -2770,19 +2918,19 @@ describe('ActionsSdkAssistant#getDeviceLocation', function () {
     let mockRequest = new MockRequest(headers, body);
     let mockResponse = new MockResponse();
 
-    let assistant = new ActionsSdkAssistant({
+    let action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getDeviceLocation().coordinates).to.deep.equal({
+    expect(action.getDeviceLocation().coordinates).to.deep.equal({
       latitude: 37.3861,
       longitude: 122.0839
     });
-    expect(assistant.getDeviceLocation().address)
+    expect(action.getDeviceLocation().address)
       .to.equal('123 Main St, Anytown, CA 12345, United States');
-    expect(assistant.getDeviceLocation().zipCode).to.equal('12345');
-    expect(assistant.getDeviceLocation().city).to.equal('Anytown');
+    expect(action.getDeviceLocation().zipCode).to.equal('12345');
+    expect(action.getDeviceLocation().city).to.equal('Anytown');
 
     // Test the false case
 
@@ -2791,19 +2939,19 @@ describe('ActionsSdkAssistant#getDeviceLocation', function () {
     mockRequest = new MockRequest(headers, body);
     mockResponse = new MockResponse();
 
-    assistant = new ActionsSdkAssistant({
+    action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getDeviceLocation()).to.equal(null);
+    expect(action.getDeviceLocation()).to.equal(null);
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant isPermissionGranted method.
+ * Describes the behavior for ActionsSdkAction isPermissionGranted method.
  */
-describe('ActionsSdkAssistant#isPermissionGranted', function () {
+describe('ActionsSdkAction#isPermissionGranted', function () {
   // Success case test, when the API returns a valid 200 response with the response object
   it('Should validate assistant request user.', function () {
     let headers = {
@@ -2839,12 +2987,12 @@ describe('ActionsSdkAssistant#isPermissionGranted', function () {
     let mockRequest = new MockRequest(headers, body);
     let mockResponse = new MockResponse();
 
-    let assistant = new ActionsSdkAssistant({
+    let action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.isPermissionGranted()).to.equal(true);
+    expect(action.isPermissionGranted()).to.equal(true);
 
     // Test the false case
 
@@ -2853,21 +3001,21 @@ describe('ActionsSdkAssistant#isPermissionGranted', function () {
     mockRequest = new MockRequest(headers, body);
     mockResponse = new MockResponse();
 
-    assistant = new ActionsSdkAssistant({
+    action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.isPermissionGranted()).to.equal(false);
+    expect(action.isPermissionGranted()).to.equal(false);
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getApiVersion method.
+ * Describes the behavior for ActionsSdkAction getApiVersion method.
  */
-describe('ActionsSdkAssistant#getApiVersion', function () {
+describe('ActionsSdkAction#getApiVersion', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant request info.', function () {
+  it('Should validate action request info.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1'
@@ -2900,21 +3048,21 @@ describe('ActionsSdkAssistant#getApiVersion', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getApiVersion()).to.equal('v1');
+    expect(action.getApiVersion()).to.equal('v1');
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getDialogState method.
+ * Describes the behavior for ActionsSdkAction getDialogState method.
  */
-describe('ActionsSdkAssistant#getDialogState', function () {
+describe('ActionsSdkAction#getDialogState', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant dialog state info.', function () {
+  it('Should validate action dialog state info.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1'
@@ -2950,23 +3098,23 @@ describe('ActionsSdkAssistant#getDialogState', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
     let dialogState = {'started': true};
 
-    expect(dialogState).to.deep.equal(assistant.getDialogState());
+    expect(dialogState).to.deep.equal(action.getDialogState());
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getActionVersionLabel method.
+ * Describes the behavior for ActionsSdkAction getActionVersionLabel method.
  */
-describe('ActionsSdkAssistant#getActionVersionLabel', function () {
+describe('ActionsSdkAction#getActionVersionLabel', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant action version label info.', function () {
+  it('Should validate action action version label info.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1',
@@ -3003,21 +3151,21 @@ describe('ActionsSdkAssistant#getActionVersionLabel', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getActionVersionLabel()).to.equal('1.0.0');
+    expect(action.getActionVersionLabel()).to.equal('1.0.0');
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getConversationId method.
+ * Describes the behavior for ActionsSdkAction getConversationId method.
  */
-describe('ActionsSdkAssistant#getConversationId', function () {
+describe('ActionsSdkAction#getConversationId', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant conversation ID.', function () {
+  it('Should validate action conversation ID.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1',
@@ -3054,21 +3202,21 @@ describe('ActionsSdkAssistant#getConversationId', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    expect(assistant.getConversationId()).to.equal('1480540140642');
+    expect(action.getConversationId()).to.equal('1480540140642');
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant getArgument method.
+ * Describes the behavior for ActionsSdkAction getArgument method.
  */
-describe('ActionsSdkAssistant#getArgument', function () {
+describe('ActionsSdkAction#getArgument', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant intent.', function () {
+  it('Should validate action intent.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1',
@@ -3097,13 +3245,6 @@ describe('ActionsSdkAssistant#getArgument', function () {
               'name': 'number',
               'raw_text': '45',
               'text_value': '45'
-            },
-            {
-              'name': 'other_value',
-              'raw_text': '45',
-              'other_value': {
-                'key': 'value'
-              }
             }
           ]
         }
@@ -3112,51 +3253,40 @@ describe('ActionsSdkAssistant#getArgument', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
     const PROVIDE_NUMBER_INTENT = 'PROVIDE_NUMBER';
 
-    function provideNumberIntent (assistant) {
-      expect(assistant.getArgument('number')).to.equal('45');
-      assistant.tell('You said ' + assistant.getArgument('number'));
+    function mainIntent (action) {
+      let inputPrompt = action.buildInputPrompt(false, 'Welcome to action snippets! Say a number.',
+        ['Sorry, say that again?', 'Sorry, that number again?', 'What was that number?'],
+        ['Say any number', 'Pick a number', 'What is the number?']);
+      let expectedIntent = action.buildExpectedIntent(PROVIDE_NUMBER_INTENT);
+      action.ask(inputPrompt, [expectedIntent], {started: true});
+    }
+
+    function provideNumberIntent (action) {
+      expect(action.getArgument('number')).to.equal('45');
+      action.tell('You said ' + action.getArgument('number'));
     }
 
     let actionMap = new Map();
+    actionMap.set(action.StandardIntents.MAIN, mainIntent);
     actionMap.set(PROVIDE_NUMBER_INTENT, provideNumberIntent);
 
-    assistant.handleRequest(actionMap);
-
-    expect(assistant.getArgument('other_value')).to.deep.equal({
-      'name': 'other_value',
-      'raw_text': '45',
-      'other_value': {
-        'key': 'value'
-      }
-    });
-
-    // Validating the response object
-    let expectedResponse = {
-      'expect_user_response': false,
-      'final_response': {
-        'speech_response': {
-          'text_to_speech': 'You said 45'
-        }
-      }
-    };
-
-    expect(JSON.stringify(mockResponse.body)).to.equal(JSON.stringify(expectedResponse));
+    action.handleRequest(actionMap);
   });
 });
 
 /**
- * Describes the behavior for ActionsSdkAssistant tell with SSML method.
+ * Describes the behavior for ActionsSdkAction tell with SSML method.
  */
-describe('ActionsSdkAssistant#tell', function () {
+describe('ActionsSdkAction#tell', function () {
   // Success case test, when the API returns a valid 200 response with the response object
-  it('Should validate assistant tell SSML.', function () {
+  it('Should validate action tell SSML.', function () {
     let headers = {
       'Content-Type': 'application/json',
       'Google-Assistant-API-Version': 'v1',
@@ -3193,25 +3323,25 @@ describe('ActionsSdkAssistant#tell', function () {
     const mockRequest = new MockRequest(headers, body);
     const mockResponse = new MockResponse();
 
-    const assistant = new ActionsSdkAssistant({
+    const action = new ActionsSdkAction({
       request: mockRequest,
       response: mockResponse
     });
 
-    function mainIntent (assistant) {
-      let inputPrompt = assistant.buildInputPrompt(false, 'Welcome to action snippets! Say anything.');
-      assistant.ask(inputPrompt);
+    function mainIntent (action) {
+      let inputPrompt = action.buildInputPrompt(false, 'Welcome to action snippets! Say anything.');
+      action.ask(inputPrompt);
     }
 
-    function rawInputIntent (assistant) {
-      assistant.tell('<speak>You said <break time="2"/>' + assistant.getRawInput() + '</speak>');
+    function rawInputIntent (action) {
+      action.tell('<speak>You said <break time="2"/>' + action.getRawInput() + '</speak>');
     }
 
     let actionMap = new Map();
-    actionMap.set(assistant.StandardIntents.MAIN, mainIntent);
-    actionMap.set(assistant.StandardIntents.TEXT, rawInputIntent);
+    actionMap.set(action.StandardIntents.MAIN, mainIntent);
+    actionMap.set(action.StandardIntents.TEXT, rawInputIntent);
 
-    assistant.handleRequest(actionMap);
+    action.handleRequest(actionMap);
 
     // Validating the response object
     let expectedResponse = {
@@ -3225,3 +3355,73 @@ describe('ActionsSdkAssistant#tell', function () {
     expect(JSON.stringify(mockResponse.body)).to.equal(JSON.stringify(expectedResponse));
   });
 });
+
+/**
+ * Describes the behavior for ActionsSdkAction getArgument method.
+ */
+describe('ActionsSdkAction#getArgument', function () {
+  // Success case test, when the API returns a valid 200 response with the response object
+  it('Should validate action intent.', function () {
+    let headers = {
+      'Content-Type': 'application/json',
+      'Google-Assistant-API-Version': 'v1',
+      'Agent-Version-Label': '1.0.0'
+    };
+    let body = {
+      'user': {
+        'user_id': '11112226094657824893'
+      },
+      'conversation': {
+        'conversation_id': '1480543005681',
+        'type': 2,
+        'conversation_token': '{"started":true}'
+      },
+      'inputs': [
+        {
+          'intent': 'PROVIDE_NUMBER',
+          'raw_inputs': [
+            {
+              'input_type': 2,
+              'query': '45'
+            }
+          ],
+          'arguments': [
+            {
+              'name': 'number',
+              'raw_text': '45',
+              'text_value': '45'
+            }
+          ]
+        }
+      ]
+    };
+    const mockRequest = new MockRequest(headers, body);
+    const mockResponse = new MockResponse();
+
+    const action = new ActionsSdkAction({
+      request: mockRequest,
+      response: mockResponse
+    });
+
+    const PROVIDE_NUMBER_INTENT = 'PROVIDE_NUMBER';
+
+    function mainIntent (action) {
+      let inputPrompt = action.buildInputPrompt(false, 'Welcome to action snippets! Say a number.',
+        ['Sorry, say that again?', 'Sorry, that number again?', 'What was that number?'],
+        ['Say any number', 'Pick a number', 'What is the number?']);
+      let expectedIntent = action.buildExpectedIntent(PROVIDE_NUMBER_INTENT);
+      action.ask(inputPrompt, [expectedIntent], ['$SchemaOrg_Number'], {started: true});
+    }
+
+    function provideNumberIntent (action) {
+      expect(action.getArgument('number')).to.equal('45');
+      action.tell('You said ' + action.getArgument('number'));
+    }
+
+    let actionMap = new Map();
+    actionMap.set(action.StandardIntents.MAIN, mainIntent);
+    actionMap.set(PROVIDE_NUMBER_INTENT, provideNumberIntent);
+
+    action.handleRequest(actionMap);
+  });
+});
